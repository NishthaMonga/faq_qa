- question: What is ONDC?
  answer: ONDC (Open Network for Digital Commerce) is an Indian government-backed
    initiative aimed at democratizing digital commerce by enabling open, inclusive,
    and interoperable e-commerce eco-system. It allows buyers and sellers to connect
    across different platforms. Like UPI transformed digital payments, ONDC seeks
    to empower small businesses, local retailers, and consumers by providing equal
    access to digital markets. The network supports multiple apps for buying, selling,
    and logistics, ensuring transparency, lower costs, and wider choices.
  tags:
  - Getting Started with ONDC
- question: How is ONDC different from traditional e-commerce platforms?
  answer: Unlike traditional platforms that are centralized and closed, ONDC is a
    decentralized open network. Any buyer app can interact with any seller app, enabling
    fair competition and wider reach.
  tags:
  - Getting Started with ONDC
- question: How Does ONDC Work?
  answer: 'Protocol-Based: ONDC uses open-source Beckn Protocol to standardize transactions.

    Interoperability: A seller listed on one app (e.g., Meesho) becomes visible on
    all ONDC buyer apps (e.g., Paytm).

    No Middleman: Sellers set prices, manage inventory, and choose logistics independently.
    ONDC works as an open network that connects buyers, sellers, and service providers
    (like logistics) through a common digital protocol, instead of relying on a single
    e-commerce platform. Participants (apps or businesses) join the network in roles
    such as: Buyer Apps – Used by customers to search and shop (e.g., Paytm, PhonePe)
    Seller Apps – Used by merchants to list products and manage orders Logistics Providers
    – Handle delivery across the network When a customer places an order on a buyer
    app, ONDC matches it with a seller and delivery provider from different platforms
    — all seamlessly integrated. This creates a decentralized and interoperable e-commerce
    system, much like how UPI enables payments between different banks and apps.'
  tags:
  - Getting Started with ONDC
- question: Is ONDC a government app?
  answer: No, ONDC is not an app but a government-backed open protocol (like UPI for
    e-commerce). Private companies build apps (e.g., Paytm, Magicpin) that use ONDC’s
    network.
  tags:
  - Getting Started with ONDC
- question: Is ONDC Free to Use?
  answer: 'ONDC itself does not charge buyers or sellers for using the network. However,
    individual Network Participants (like Seller Apps, Buyer Apps, or Gateways) may
    apply their own fees for onboarding, transactions, or services. These fees are
    typically lower than those on traditional e-commerce platforms. Buyers:  Buyer
    Apps may apply convenience fees (if any). The actual costs depend on the participants
    you engage with, not ONDC directly.'
  tags:
  - Getting Started with ONDC
- question: Benefits of ONDC?
  answer: 'For Sellers: Low Fees: No 20-30% commission of Buyer and seller app. Wider
    Reach: Sell across multiple apps without separate listings. Control: Own pricing,
    inventory, and customer data. For Buyers: More Choices: Access to local sellers,
    niche products. Better Prices: No platform-driven surge pricing. For India: Digital
    Inclusion: Empowers small businesses in Tier 2/3 cities. Innovation: Startups
    can build apps on ONDC’s open network.'
  tags:
  - Key Concepts and Roles
- question: What is a Network Participant (NP)?
  answer: A Network Participant is any entity that integrates with ONDC and plays
    a role such as Buyer App (BAP), Seller App (BPP), Gateway, Logistics Provider.
  tags:
  - Key Concepts and Roles
- question: "What are the main roles in ONDC?\n A:"
  answer: 'Network Participants (NPs) : These are entities that directly integrate
    with ONDC protocols (Beckn Protocol) and exchange protocol messages on the network.
    They are the core technical actors in ONDC. Ecosystem Participants: These are
    all other actors who enable, support, or benefit from the ONDC ecosystem. Not
    all of them directly interact using the protocol.'
  tags:
  - Key Concepts and Roles
- question: What is RSF in ONDC?
  answer: 'The Reconciliation and Settlement Framework (RSF) in ONDC defines the process
    by which Network Participants (NPs) settle funds for on-network transactions.
    It ensures secure, transparent, and efficient fund flow through: Digital signatures
    for non-repudiation Integration with banks via Settlement Agencies (e.g., NBBL)
    Batch-based settlement advice generation and routing Final settlement within T+1
    days via APIs (/settle, /on_settle) RSF supports compliance with RBI guidelines
    and builds trust across the ONDC network.'
  tags:
  - Optional reconciliation updates by fund receivers
- question: Can a single participant be both a BAP and a BPP?
  answer: Yes, an entity can onboard in multiple roles as long as each role complies
    with ONDC’s protocol and guidelines
  tags:
  - Technical Architecture
- question: What is the Gateway in ONDC?
  answer: The Gateway is a crucial component in the ONDC network that facilitates
    discovery by routing search requests from Buyer Apps (BAPs) to all registered
    Seller Apps (BPPs). It does not send responses back to the BAP—its role is limited
    to multicasting the search request across the network. The BPPs then respond directly
    to the BAP with on_search. Gateway Endpoints:-
  tags:
  - Technical Architecture
- question: What is the registry in ONDC?
  answer: 'The ONDC Registry is a central directory of all Network Participants (NPs)
    in a given environment (Staging, Preprod, or Prod). It stores: NP’s base API URLs
    Supported domains (e.g., Grocery, Mobility) Each environment has its own registry;
    participants must subscribe to the appropriate registry before transacting in
    that environment.'
  tags:
  - Public keys for digital signature validation
- question: Do all messages pass through the Gateway?
  answer: No. Only discovery-phase messages (like /search) go through the Gateway.
    After sellers respond to discovery, all other protocol messages—such as /select,
    /init, /confirm, etc.—are exchanged directly between Buyer App and Seller App
    over secure channels (peer-to-peer).
  tags:
  - Public keys for digital signature validation
- question: How does the Gateway decide which Seller Apps receive a search request?
  answer: 'The Gateway filters Seller Apps based on: Domain (e.g., Fashion, Grocery,
    F&B) Buyer’s location (city) This ensures only relevant sellers get the request,
    reducing noise and improving efficiency.'
  tags:
  - Public keys for digital signature validation
- question: Can a participant in the Staging environment transact with one in Production?
  answer: No. Each environment is logically and technically isolated. Participants
    registered in one environment cannot communicate with participants in another.
    Ensure that all transacting parties are in the same environment.
  tags:
  - Public keys for digital signature validation
- question: '- Is GSTIN mandatory for sellers?'
  answer: '- It’s mandatory for SNP and not sellers. We don’t have a requirement for
    PAN. But it depends on the SNP. While onboarding, if they ask for gstin.'
  tags:
  - Public keys for digital signature validation
- question: "How many domains are currently supported on ONDC?\n A: ONDC currently\
    \ supports a wide range of domains across commerce and services. The primary domains\
    \ include:"
  answer: 'Retail (RET): General merchandise, fashion, electronics, beauty, and personal
    care. Food & Beverage (F&B): Restaurants, cloud kitchens, and food delivery. Grocery:
    Daily essentials, fresh produce, and household items. Health & Wellness: Pharmacies,
    health supplements, and wellness services. Home & Kitchen: Furniture, appliances,
    and kitchenware. Beauty & Personal Care: Skincare, cosmetics, and hygiene products.
    Electronics: Gadgets and electronic accessories. Fashion & Footwear: Clothing,
    shoes, and accessories. Baby Care: Infant and toddler products. Bakery, Cakes
    & Dairy: Baked goods and dairy products. Agriculture: Agri-tech and farm produce
    marketplaces. Mobility, Travel and Tourism (TRV): Ride-hailing, public transport,
    and intercity travel, hotels, experiences/ activities. Logistics: Shipping, delivery,
    and supply chain services. Financial Services (FIS): Loans, insurance, and investments.
    Services (SRV): Home maintenance, repair, and professional services. Media, Entertainment
    & Content (MEC): Streaming and digital content. Gift Cards: Digital gift card
    sales and redemption. Please refer to this  for the list of all domains and their
    corresponding domain codes.'
  tags:
  - Environments and Integration Flow
- question: Is ONDC live in production?
  answer: 'ONDC is live in its production environment.  The ONDC integration process
    involves three environments: Staging, Pre-Production, and Production.  After a
    Network Participant (NP) completes the integration and testing process in the
    Staging and Pre-Production environments, they move to the Production environment.  This
    Production environment is where real-time transactions occur on the ONDC network.  Successfully
    completing functional testing, complying with the final checklist, and navigating
    a probationary period in the Production environment qualifies an NP to "Go-Live"
    on Production, meaning they can begin real e-commerce operations on ONDC.  The
    ONDC website and documentation refer to NPs and their applications as "live" on
    the network, indicating the Production environment is active and facilitating
    real transactions.'
  tags:
  - Environments and Integration Flow
- question: Can I use one environment to test and go live?
  answer: "No. ONDC operates across three isolated environments: Staging: For development\
    \ and alpha testing Pre-Production: For beta testing and final validation Production:\
    \ Live environment with real orders\n Participants must separately onboard and\
    \ subscribe to each environment."
  tags:
  - Environments and Integration Flow
- question: What tools does ONDC provide for testing?
  answer: Reference apps (sample BAP/BPP) All relevant tool links have been consolidated
    and are accessible via our .
  tags:
  - Pramaan platform for credential issuance and validation
- question: How do participants test their integration?
  answer: ONDC provides mock servers, log validation tools and utilities. Participants
    must complete log submissions and pass conformance testing before going live.
  tags:
  - Integration Support & Developer Tools
- question: Does ONDC provide code for integration or development?
  answer: 'ONDC does not provide custom code for individual participants or specific
    use cases. However, to assist with the onboarding process, QA validations, and
    general understanding of the protocol, we offer a set of utilities and reference
    applications that are openly available on GitHub. These resources are designed
    to help participants accelerate their integration efforts by demonstrating best
    practices and standard protocol implementations. You can explore them here:'
  tags:
  - Integration Support & Developer Tools
- question: What is the ONDC Portal and what is its use?
  answer: 'The  is a centralized platform designed to support participants throughout
    their journey on the ONDC Network — from onboarding to going live. Through the
    portal, participants can: It serves as the primary interface to ensure a smooth
    and guided integration into the ONDC ecosystem.'
  tags:
  - Coordinate with the ONDC team for approvals and readiness
- question: How can I get technical support for ONDC integration or onboarding issues?
  answer: 'For any technical support related to ONDC integration, onboarding, or platform-related
    queries, you can reach out to the ONDC technical team via email at:'
  tags:
  - Coordinate with the ONDC team for approvals and readiness
- question: What should developers know about managing keys on ONDC?
  answer: "ONDC requires all protocol messages to be signed using digital signatures.\
    \ Store private keys securely in .env files (never expose them in code repos)\
    \ Only public keys are stored in the Registry\n Best practice: Add .env to .gitignore\
    \ to prevent accidental commits of secrets."
  tags:
  - Coordinate with the ONDC team for approvals and readiness
- question: What happens if I send a request with an expired timestamp?
  answer: ONDC requires a timestamp in context to be within ±10 seconds of current
    server time. Use NTP-synced clocks.
  tags:
  - Coordinate with the ONDC team for approvals and readiness
- question: 'What are logs in the context of ONDC, and how are they used?

    A: Logs are detailed records of requests and responses for all enabled APIs, captured
    during specific scenarios or workflows. They provide a comprehensive history of
    interactions between Network Participants within the ONDC network and are essential
    for debugging, validation, and certification.  For example:- TRV11,the logs can
    be validated using a POST request to the Log Validation Utility at https://log-validation.ondc.org/api/validate/trv/trv11.'
  answer: 'The structure for the validation payload is: { "domain": "ONDC: TRV11",
    "version": "2.0.0", "flow": "STATION_CODE", // or GPS or CANCEL "payload": { "search_1":
    {}, "on_search_1": {}, "search_2": {}, "on_search_2": {}, "select": {}, "on_select":
    {}, "init": {}, "on_init": {}, "confirm": {}, "on_confirm": {}, "status": {},
    "on_status": {} } } Each key in the payload corresponds to a specific API call
    and its response. For instance: "search_1" contains the initial Search request
    payload, "on_search_1" contains the corresponding on_search response from the
    seller app. The exact sequence and structure of API calls depend on the selected
    flow — such as "STATION_CODE", "GPS", or "CANCEL". For retail logs (version 1.2.0),
    a similar validation utility exists at https://log-validation.ondc.org/api/validate,
    with a different payload structure and available flows.  The logs for retail,
    IGM (Issue & Grievance Management), and RSF (Reconciliation and Settlement Framework)
    need to be submitted to a designated GitHub repository after self-testing.'
  tags:
  - Coordinate with the ONDC team for approvals and readiness
- question: How can I verify what went wrong in a failed transaction?
  answer: Check error.code and error.message in the response or callback body. Logs
    and ACKs contain diagnostic info.
  tags:
  - Coordinate with the ONDC team for approvals and readiness
- question: Why do I get error signature verification failed?
  answer: 'Common causes: Header signing mismatch (e.g., extra spaces)'
  tags:
  - Message modified after signing
- question: How do I test error scenarios in a sandbox?
  answer: Use mock BAP/BPP endpoints or inject invalid payloads to test error handling.
  tags:
  - Onboarding and Its Processes
- question: 'What are the steps involved in onboarding to ONDC?

    A:'
  answer: Role identification (BAP, BPP.) ONDC Integration Test Bench (via Pramaan)
  tags:
  - Environment promotion to Production after approval
- question: Why is a subscription to the ONDC Registry required?
  answer: 'Subscription to the ONDC Registry is mandatory to: Participate in ONDC
    protocol-based interactions Enable gateway routing and domain-level filtering
    Each NP must subscribe separately to Staging, Preprod, and Production registries
    to transact in those environments.'
  tags:
  - Be discoverable on the network
- question: 'What is to be used as a subscriber_id: http domain or some text id in
    a particular format?'
  answer: 'In Open Network for Digital Commerce (ONDC), the subscriber_id is a unique
    identifier associated with a network participant (such as a seller app, buyer
    app, logistics provider) during the onboarding process. It is typically the domain
    name or endpoint that uniquely identifies that participant within the ONDC network.
    The subscriber_id’s default value will be the Fully Qualified Domain Name of the
    subscriber unless specified otherwise as a network policy. (usually a domain format
    like ondc.seller.example) It is used in API requests to identify who is making
    the call, and appears in the context object of ONDC payloads. It is linked with
    authentication — used along with keys like unique_key_id (UKID) to sign and verify
    API requests. It is part of the ONDC Registry''s Subscriber object which stores
    details of the participant. Buyer Apps (bap_id) and Seller Apps (bpp_id) in payloads
    are both subscriber_ids. { "context": { "domain": "nic2004:52110", "bap_id": "buyerapp.example.com",  //
    subscriber_id of buyer app "bpp_id": "ondc.seller.example",   // subscriber_id
    of seller app "timestamp": "2023-05-15T10:00:00Z" } }'
  tags:
  - Be discoverable on the network
- question: What is the difference between subscriber id and subscriber url?
  answer: 'The ONDC network utilises two identifiers for subscribers: a subscriber
    ID and a subscriber URL. While both serve the purpose of identifying participants
    within the network, they differ in their nature and function. Subscriber_id: A
    unique, identifier assigned to each subscriber within the ONDC network Subscriber_url:
    A publicly accessible URL that points to the subscriber''s information and endpoints
    hosted within the ONDC network. It is an extension to the subscriber id domain.
    Make sure subscriber_url includes subscriber id.


    Example: Suppose a network participant has the domain ondc.seller.example, their
    subscriber ID becomes "ondc.seller.example" and their subscriber URL can be  or
    any subroute with the domain ondc.seller.example where they are hosting their
    API endpoints for ONDC transactions.'
  tags:
  - Be discoverable on the network
- question: Subscriber ID not whitelisted by ONDC
  answer: '{ "message": { "ack": { "status": "NACK" } }, "error": { "type": "POLICY-ERROR",
    "code": "144", "path": null, "message": "Subscriber Id is not whitelisted in our
    database" } } Get your subscriber_id whitelisted/approved by ONDC. To do that:
    For Staging: Begin by registering on the  and ensuring your profile is fully completed
    100%. Once this is done, you can proceed to request domain whitelisting on portal
    : Home > Environment Access Request. For Preprod: Self Declaration is required
    to be submitted through the portal and then the whitelisting request needs to
    be raised through the portal itself. For Prod: After your preprod logs are verified
    and the QA process is completed, you''re ready to go to the production environment.
    You may then raise a whitelisting request like all the other environments and
    proceed.'
  tags:
  - Be discoverable on the network
- question: What is ONDC site verification and what is its purpose?
  answer: 'ONDC site verification is a mandatory step in the subscriber onboarding
    process. It is used by the ONDC Registry to perform domain verification for the
    declared subscriber_id. The process involves the following steps: Generate a Unique
    Request ID (request_id): This can be any unique identifier such as a UUID, number,
    or alphanumeric string. Sign the Request ID: Use your signing_private_key to sign
    the request_id using the Ed25519 algorithm (without hashing). This will generate
    a SIGNED_UNIQUE_REQ_ID. You can use the on_subscribe utility to assist with this
    step. Create the ondc-site-verification.html file: Host this file at the root
    of your subscriber_id domain (e.g., https://<subscriber_id>/ondc-site-verification.html)
    and include the SIGNED_UNIQUE_REQ_ID inside it. The ONDC Registry will check for
    this file to validate that the domain is correctly set up before allowing subscription.'
  tags:
  - Be discoverable on the network
- question: Domain Verification Failed
  answer: '{ "message": { "ack": { "status": "NACK" } }, "error": { "type": "POLICY-ERROR",
    "code": "132", "path": null, "message": "Domain verification is failed" } }  A
    domain verification error occurs if the request_id in your subscribe payload does
    not match the request_id signed with your private key. If the request_id matches,
    the issue may be due to a mismatch in the signing key pair. Please use the same
    request_id in the subscribe utility code, the one that has been used in the subscribe
    payload. If you have a custom implementation, kindly use the , ,  or  utility
    to understand the implementation in your specific language.'
  tags:
  - Be discoverable on the network
- question: Ondc-site-verification file is not found
  answer: '{ "message": { "ack": { "status": "NACK" } }, "error": { "type": "POLICY-ERROR",
    "code": "132", "path": null, "message": "ondc-site-verification file is not found"
    } }  Create ondc-site-verification.html and host at domain root level. Here is
    an example https://<subscriber_id>/ondc-site-verification.html Use the correct
    html formatting provided in the documentation. Whitelist all the IPs if you have
    firewall or IP blocking in your sever: 34.131.40.9  34.131.211.247  34.131.201.63  34.131.180.63  34.131.78.219
    34.93.10.146 35.200.143.183  34.93.118.120  35.200.183.209  34.93.102.253 35.200.232.136  34.100.170.176
    107.178.231.181/32'
  tags:
  - Be discoverable on the network
- question: OCSP Failed
  answer: '{ "message": { "ack": { "status": "NACK" } }, "error": { "type": "POLICY-ERROR",
    "code": "132", "path": null, "message": "OCSP failed" } } You need to have a valid
    SSL certificate for your domain. This will be used while performing Online Certificate
    Status Protocol (OCSP) validation. Please obtain a valid SSL certificate that
    supports OCSP validation for the purchased domain.'
  tags:
  - Be discoverable on the network
- question: How does a subscriber get Registry’s public keys to decrypt information
    on on_subscribe?
  answer: The Registry’s public keys are used to decrypt the encrypted payload received
    during the on_subscribe callback. These keys are published and made available
    by the ONDC Registry. You can retrieve them from this  at point no. 6.
  tags:
  - Be discoverable on the network
- question: How to generate signing and encryption key pairs?
  answer: You can you utilities to generate signing and encryption keys
  tags:
  - Be discoverable on the network
- question: Code example for the export format of the public key?
  answer: There are fundamentally 2 formats in which Ed25519 & X25519 Keys are exported.
    Raw  (simply base64 encoded of the raw bytes) Pem (Typically used by JCA/JCE here
    it is bas64 encoded of a X509encoded public key ) If you do an online key pair
    generation for Ed25519, you will generally get it in raw format. Both these formats
    are interconvertible. However, since raw is more prevalent, we could use the same
    for our communication with the registry.
  tags:
  - Be discoverable on the network
- question: Which algorithm will BAP use for decrypting Challenge String?
  answer: In general, the X25519 Key Agreement algorithm is used to derive a symmetric  AES
    key for encryption and decryption between any two parties. We will use it between
    registry and participants to encrypt and decrypt challenges.
  tags:
  - Be discoverable on the network
- question: Is subscriber_id unique across the network for a BAP or is it the unique_key_id?
  answer: Both subscriber_id and unique_key_id must be unique for each Network Participant
    within a given ONDC environment (such as staging or production). However, the
    same subscriber_id can be reused in different environments (e.g., a BAP can use
    the same domain name as subscriber_id in both staging and production).
  tags:
  - Be discoverable on the network
- question: Should we validate the bpp_id or bap_id in the context against the Authorization
    header?
  answer: Yes, bap_id and bpp_id need to be validated. When BPP receives a request,
    If bap_id in context does not match bap_id in signature, the BPP must return a
    401 unauthorized response.
  tags:
  - Be discoverable on the network
- question: What cipher is used to encrypt a challenge? We need to know it to be able
    to decrypt the challenge?
  answer: The encryption would be AES but it is derived using the key agreement mechanism
    of x25519. Every participant registers with the registry 2 public keys. An ed25519
    and x25519 and would keep the private key with them Registry would use its private
    and public encryption key to derive the aes key for encrypting the challenge.
    Participants will use their own Private key and registry's public key to derive
    the AES key that was used for encryption. And decrypt the challenge using this
    key.
  tags:
  - Be discoverable on the network
- question: If subscriber A needs to get the public key of Subscriber B when doing
    a transaction, then does it need to call lookup API to check whether Subscriber
    B exists?
  answer: 'Yes, Subscriber A needs to call the lookup API to get the public key of
    Subscriber B and verify if Subscriber B exists in the registry. The lookup API
    only returns subscriber records that have status = "SUBSCRIBED" or “WHITELISTED”.
    Here''s a detailed explanation: 1. Why Lookup? ONDC relies on public-key cryptography
    for secure communication. When Subscriber A wants to interact with Subscriber
    B, it needs Subscriber B''s public key to verify signatures and ensure the message
    is from a trusted source. 2. Lookup API: The ONDC registry provides a lookup API
    that allows subscribers to fetch the public key of other subscribers using their
    `subscriber_id`. 3. Active Status Check: The lookup API''s response includes a
    "status" field indicating the subscriber''s status.  Subscriber A should check
    if Subscriber B''s status is "SUBSCRIBED". This ensures that Subscriber B is active
    on the network and the communication will be successful. 4. Postman curl Example:
    curl --location ''https://prod.registry.ondc.org/v2.0/lookup'' \ --header ''Content-Type:
    application/json'' \ --header ''Authorization: Signature keyId="example-bap.com|bap1234|ed25519",
    algorithm="ed25519", created="<timestamp>", expires="<timestamp>", headers="(created)(expires)digest",
    signature="<signature>"'' \ --data ''{ "country": "IND", "domain": "ONDC:RET10"
    }'''
  tags:
  - Be discoverable on the network
- question: Does the lookup API need to be called before calling any APIs?
  answer: 'The Lookup API is not mandatory to call before every API request. Instead,
    it serves as a utility that subscribers can use whenever they need to resolve
    information about another participant—typically to fetch their public keys, network
    roles, or endpoint details from the ONDC Registry. This is particularly important
    for verifying the signatures in data payloads exchanged over the network. For
    example, you may use the Lookup API to fetch a seller app’s signing public key
    when validating a signed message. Recommendation for efficiency: To reduce frequent
    calls to the Lookup API, participants can cache the public registry dump periodically.
    This dump includes information about all network participants and their public
    signing keys. You can then rely on your local cache for most lookups, and use
    the v2.0/lookup API only as a fallback mechanism when the cache is outdated or
    a new participant needs to be resolved.'
  tags:
  - Be discoverable on the network
- question: Why is the subscriber_url showing as null in the registry after subscribing?
  answer: 'The subscriber_url appears as null when the participant is only whitelisted.
    It gets updated in the registry once you complete the onboarding by calling the
    subscribe API with your subscriber_url. The value provided in that API call will
    be saved and reflected in the registry records. Key-wise explanation to subscribe
    payload ops_no ops_no : 1 - Buyer App Registration ops_no : 2 - Seller App Registration
    ops_no : 4 - Buyer & Seller App Registration Note: ops_no 3 & 5 is deprecated
    as the feature of Seller On Record (SOR) in registry is obsolete. request_id and
    unique_key_id The `request_id` and `unique_key_id` are distinct random alphanumeric
    strings or UUIDs generated by the network participant. callback_url The callback_url
    in ONDC is a relative path provided during the subscription process. It tells
    ONDC where to send verification callbacks like on_subscribe. The final callback
    endpoint URL is constructed as: https://<subscriber_url>/<callback_url>/on_subscribe
    If: subscriber_id = callback_url = /api/ondc Then the final on_subscribe callback
    URL will be: https://www.sellerapp.example.com/api/ondc/on_subscribe key_pairs
    The network participant must include the `signing_public_key` and `encryption_public_key`
    in the subscribe payload, which were generated during the key generation process.
    Additionally, they need to specify the keys'' validity period using the `valid_from`
    and `valid_until` fields. network_participant The network participant includes
    a `domains` object specifying the domains they wish to subscribe to. For instance,
    if the network participant is whitelisted for `ONDC:RET10` and `ONDC:RET11`, they
    need to include two objects in the `network_participant` array as shown below:
    ```json "network_participant": [ { "subscriber_url": "/ret10", "domain": "ONDC:RET10",
    "type": "sellerApp", "msn": false, "city_code": ["*"] }, { "subscriber_url": "/ret11",
    "domain": "ONDC:RET11", "type": "sellerApp", "msn": false, "city_code": ["*"]
    } ] `` subscriber_url Essentially, this field represents the relative path to
    where your transactional API endpoints are hosted. For example, if your endpoint
    is subscriber_id/api/v1/search, then the subscriber_url in the subscriber payload
    should be set to /api/v1. In the JSON, the subscriber_url is defined for each
    domain, allowing different relative paths based on domain-specific requirements.
    For instance, ONDC:RET10 might have a subscriber_url like /ret10, whereas ONDC:RET11
    could use /ret11. Alternatively, you can adopt an API versioning approach — such
    as /api/v1 — as the subscriber_url. If you''re hosting your APIs at the root level,
    then / would be the value used in the payload.'
  tags:
  - Signature & Verification FAQs
- question: "What does the Authorization header look like?\n A:It follows this format:"
  answer: 'Authorization: Signature keyId="<subscriber_id>|<key_id>", algorithm="rsa-sha256",
    headers="(created) (expires) digest", signature="<base64-encoded-signature>"'
  tags:
  - Signature & Verification FAQs
- question: "What tools are available for signature generation and validation?\n A:\
    \ ONDC provides sample scripts and SDKs (in JavaScript, Python, etc.) for generating\
    \ and verifying signatures, and these can be adapted into your platform’s middleware."
  answer: 'There are commonly 6 types of error messages:'
  tags:
  - Signature & Verification FAQs
- question: Auth header not found
  answer: 'Reason: Making API requests without setting up authorization header. Resolution:
    To resolve this, ensure that you generate the authorization header as per the
    ONDC protocol. This typically involves signing the request payload using your
    private key, constructing the header with the appropriate Authorization format,
    and including any required timestamps or identifiers. You can follow the step-by-step
    instructions provided in the . Alternatively, you may use the ONDC header generation  to
    simplify this process.'
  tags:
  - Signature & Verification FAQs
- question: Authentication failed
  answer: 'Reason: The unique key ID assigned at the time of subscription does not
    match the unique key ID used in the header creation Additional Possible Reason:
    The subscriber_id in the header may not exist in the registry lookup. Resolution:
    Kindly ensure you are using an existing subscriber_id within the network. Retrieve
    the correct unique key ID by calling the lookup API with your subscriber ID. Then,
    use the correct ukId and subscriber_id in the header to generate the authorization
    header. This will resolve the issue.'
  tags:
  - Signature & Verification FAQs
- question: Invalid Signature
  answer: 'Reason: There might be problems when signatures are not encrypted using
    the same private key, especially since its corresponding public key has been shared
    with the ONDC network during the subscription process. Resolution: Use the private
    key to create a signature. This private key matches the public key that was previously
    shared with the ONDC network when you subscribed.'
  tags:
  - Signature & Verification FAQs
- question: Signature Verification failed
  answer: 'Reason: When decrypted signature are not matched with request body payload
    Resolution: During the signature generation process, minify the payload. Similarly,
    before making your API call, minify the request body. This is crucial because
    tools like VS Code may automatically format your code, introducing extra spaces
    and commas, which can result in signature verification errors.'
  tags:
  - Signature & Verification FAQs
- question: Signature is forged
  answer: 'Reason: If the signature is not included in the request header adhering
    to the specified format, it could be due to alterations in the positioning of
    key-value pairs or the addition of extra spaces. Resolution: Ensure your Authorization
    header adheres to the specified format mentioned in this .'
  tags:
  - Signature & Verification FAQs
- question: Algorithm Mismatched
  answer: 'Reason: This issue may arise during the decryption process, possibly because
    the encryption was not performed as per the ONDC defined . Resolution: For creating
    the Authorization header, use the ONDC utility function exactly as it is provided.
    However, if you prefer not to use the utility directly, you can employ the same
    functions and libraries utilised within the ONDC utility to generate headers.
    In this scenario, ensure that the encryption and decryption algorithms remain
    consistent. You can also refer to this .


    For computing the digest of the request body, the hashing function will use the
    BLAKE-512 (2b) hashing algorithm. Then to digitally sign the singing string, the
    subscribers should use the "ed25519" algorithm for  signature.'
  tags:
  - Signature & Verification FAQs
- question: I am facing a Signature verification issue with the Reference apps or
    Mock servers. How do I resolve this?
  answer: 'Points to consider while generating signatures: One of the plausible reasons
    can be that you aren’t sending the same payload as you have used for the generating
    signature. For example, you have generated the signature with minify json. But
    when you are making a http request you have or your editor has beautified the
    payload. Secondly, make sure there are no escape characters added in the signature
    instead of space. After generating the signature, changing the context_timestamp
    to current time while making http request will receive NACK for Signature verification.
    It is not accepted if you make any change after generating the signature. Furthermore,
    You have added a wrong subscriber_id or unique_key while generating the signature.
    Make sure you put the signature in the Header as an Authorization key not in Bearer
    Token. While generating a signature through an endpoint as shown in the image
    below. It returns as json (stringified version)  which means addition of escape
    characters. It is crucial to ensure the signature remains intact and free from
    any alterations. FAQs for ONDC Registry Lookup v2.0 API'
  tags:
  - Signature & Verification FAQs
- question: What is Lookup v2.0 in ONDC?
  answer: Lookup v2.0 is an ONDC Registry API that allows participants (BAPs, BPPs,
    etc.) to securely query network details (e.g., seller/buyer endpoints, public
    keys and unique key ID) using signed requests.
  tags:
  - Signature & Verification FAQs
- question: How do I access Lookup v2.0?
  answer: 'Use these endpoints: Staging: https://staging.registry.ondc.org/v2.0/lookup
    Pre-Prod: https://preprod.registry.ondc.org/v2.0/lookup Production: https://prod.registry.ondc.org/v2.0/lookup'
  tags:
  - Signature & Verification FAQs
- question: What authentication is required?
  answer: 'Requests must include: Authorization header with a signature (Ed25519 algorithm).
    created and expires timestamps (ISO8601 UTC format). digest (Blake-2b hash of
    the request body). Example: curl --location ''https://prod.registry.ondc.org/v2.0/lookup''
    \ --header ''Authorization: Signature keyId="example-bap.com|bap1234|ed25519",
    algorithm="ed25519", created="2024-05-04T12:00:00Z", expires="2024-05-04T12:05:00Z",
    headers="(created)(expires)digest", signature="<base64_signature>"'' \ --data
    ''{"country": "IND", "domain": "ONDC:RET10"}'''
  tags:
  - Signature & Verification FAQs
- question: How to Generate the Signature
  answer: 'To generate the signature, follow the standard signing and verification
    process outlined below: Refer to the detailed . Alternative Option: Use Provided
    You can skip the manual process and use the ready-to-use utilities provided by
    us in multiple programming languages.'
  tags:
  - Signature & Verification FAQs
- question: What parameters are mandatory in the request body?
  answer: "This API doesn’t have fixed mandatory or optional parameters.\n Instead,\
    \ the user must send at least any two keys from the below list: subscriber_id\
    \ country ukId city domain type (BAP or BPP) If fewer than two keys are provided,\
    \ the API will throw an error."
  tags:
  - Signature & Verification FAQs
- question: What’s the difference between v1.0 and v2.0?
  answer: In v1.0, requests didn’t require an authorization header. In v2.0, all requests
    must be signed and include an Authorization header. You sign the payload (e.g.,
    lookup) using the same private key used during onboarding.This enforces stronger
    security by validating sender authenticity and payload integrity.
  tags:
  - Signature & Verification FAQs
- question: What if my request fails with 401 Unauthorized?
  answer: Verify the signature format and timestamps (created/expires). Ensure the
    digest matches the request body. Check if the Ed25519 public key is registered
    with ONDC.
  tags:
  - Signature & Verification FAQs
- question: Where can I find sample code for signing?
  answer: Refer to the Reference Utility () for signing and verification mechanism.
  tags:
  - Signature & Verification FAQs
- question: "What data is returned in a lookup response?\n A: The response contains:"
  answer: subscriber_id domain signing_public_key callback_urls city and country codes
    status (SUBSCRIBED, UNSUBSCRIBED, etc.)
  tags:
  - Signature & Verification FAQs
- question: Can lookup responses be cached?
  answer: 'Yes, caching lookup responses can help optimize performance. However, it’s
    important to refresh the cache periodically—for example, every few hours—or in
    real time for critical operations such as order confirmations, to ensure data
    remains accurate and up to date. Here are some common errors you might see:'
  tags:
  - Common Errors
- question: Auth header not found
  answer: 'Reason: Making API requests without setting up authorization header. Resolution:To
    resolve this, ensure that you generate the authorization header as per the ONDC
    protocol. This typically involves signing the request payload using your private
    key, constructing the header with the appropriate Authorization format, and including
    any required timestamps or identifiers. You can follow the step-by-step instructions
    provided in the . Alternatively, you may use the ONDC header generation  to simplify
    this process.'
  tags:
  - Common Errors
- question: Subscriber not found
  answer: 'Reason: Invalid format of the signature, subscriber_id not found, presence
    of backslashes or escape characters in the header, or the subscriber_id used while
    generating the header does not exist in the registry records. Resolution: Ensure
    that the header format strictly matches the expected structure (as shown below),
    without any backslashes, escape characters, or unintended formatting. Additionally,
    verify that the subscriber_id used exists in the registry as a SUBSCRIBED one.
    Sample format of header: Signature keyId="buyer-app.ondc.org|207|ed25519",algorithm="ed25519",created="1641287875",expires="1641291475",headers="(created)
    (expires) digest",signature="fKQWvXhln4UdyZdL87ViXQObdBme0dHnsclD2LvvnHoNxIgcvAwUZOmwAnH5QKi9Upg5tRaxpoGhCFGHD+d+Bw=="'
  tags:
  - Common Errors
- question: There is mismatch in the algorithm
  answer: 'Reason: The error indicates an issue with the highlighted part of the header
    — possibly due to invalid format, extra characters, or slashes. Resolution: Check
    that the header format matches the expected structure (as shown below) and ensure
    there are no backslashes or extra characters. Signature keyId="|207|ed25519",algorithm="ed25519",created="1641287875",expires="1641291475",headers="(created(expires)digest",signature="fKQWvXhln4UdyZdL87ViXQObdBme0dHnsclD2LvvnHoNxIgcvAwUZOmwAnH5QKi9Upg5tRaxpoGhCFGHD+d+Bw=="'
  tags:
  - Common Errors
- question: The request has expired
  answer: "Reason: This error indicates that the expires timestamp in the signature\
    \ header has either passed or is incorrectly formatted. Since the expiry timestamp\
    \ is part of the signed data, any change to this value without regenerating the\
    \ signature will cause signature verification to fail. Issues may also arise from\
    \ extra characters, slashes, or incorrect formatting within the highlighted part\
    \ of the header. Resolution: Ensure that the created and expires timestamps are\
    \ correctly set relative to the current time and are within the valid window.\
    \ Also verify that the header format strictly adheres to the expected structure\
    \ with no additional characters, slashes, or escape sequences. If any timestamp\
    \ is modified, regenerate the signature to maintain integrity. Signature \nkeyId=\"\
    |207|ed25519\",algorithm=\"ed25519\",created=\"1641287875\",expires=\"1641291475\"\
    ,headers=\"(created)(expires)digest\",signature=\"fKQWvXhln4UdyZdL87ViXQObdBme0dHnsclD2LvvnHoNxIgcvAwUZOmwAnH5QKi9Upg5tRaxpoGhCFGHD+d+Bw==\""
  tags:
  - Common Errors
- question: Header parsing failed OR Invalid headers are present in header parameters
  answer: 'Reason: The error indicates an issue with the highlighted part of the header
    — possibly due to invalid format, extra characters, or slashes. Resolution: Check
    the header format carefully and ensure there are no extra characters, slashes,
    or escape sequences. Signature keyId="|207|ed25519",algorithm="ed25519",created="1641287875",expires="1641291475",headers="(created)(expires)digest",signature="fKQWvXhln4UdyZdL87ViXQObdBme0dHnsclD2LvvnHoNxIgcvAwUZOmwAnH5QKi9Upg5tRaxpoGhCFGHD+d+Bw=="'
  tags:
  - Common Errors
- question: The signature verification failed
  answer: "Reason: The issue occurs due to a mismatch between the payload and the\
    \ signing string, often caused by formatting or beautification, even if the payload\
    \ content is the same. Resolution: The JSON should be stringified before signing,\
    \ and the request body must be the exact lookup payload that was signed. Check\
    \ that the lookup payload and the signing string are exactly the same — without\
    \ beautification, extra spaces, or formatting changes. Minified JSON is preferred.\
    \ Implementation Guide: Process Walkthroughs The ONDC onboarding process begins\
    \ with key generation, where participants create a signing key pair using the\
    \ Ed25519 algorithm and an encryption key pair using the X25519 algorithm (in\
    \ ASN.1 DER format). Utilities for this are available in multiple languages such\
    \ as Java, Python, Node.js, PHP, and Go. Once the keys are generated, participants\
    \ move to endpoint setup, which includes generating a unique request_id, signing\
    \ it, and hosting the ondc-site-verification.html file at the appropriate URL\
    \ for domain verification. Additionally, the /on_subscribe endpoint must be implemented\
    \ and hosted to handle challenge decryption using a shared key derived from the\
    \ encryption keys. After these technical prerequisites are met, participants prepare\
    \ a /subscribe request that includes essential entity details such as subscriber\
    \ ID, callback URLs, public keys, and a unique key ID. The appropriate operation\
    \ type (e.g., Buyer App, Seller App, or both) is selected based on the participant’s\
    \ role. The final subscription request is then submitted to the ONDC Registry\
    \ endpoint corresponding to the relevant environment (Staging, Pre-Prod, or Production)\
    \ to complete the onboarding process. Once you receive an ACK response from the\
    \ Registry, your entity is successfully subscribed to the ONDC network. Once a\
    \ Network Participant (NP) successfully subscribes to the ONDC Registry, it can\
    \ perform a self-lookup to validate its presence in the network. This is done\
    \ by calling the /lookup API using its own subscriber_id. This journey is crucial\
    \ for NPs to verify whether their registration details (including subscriber type,\
    \ domain, city, signing/public keys, and endpoint URLs) are correctly recorded\
    \ in the registry. This also serves as a quick way to test connectivity with the\
    \ registry and confirm successful onboarding. The same lookup flow is used by\
    \ other participants (like gateways and seller apps) to retrieve public keys and\
    \ endpoint information for interaction and signature verification. To maintain\
    \ trust and ensure message integrity in the ONDC network, every request initiated\
    \ by an NP must include an Authorization header. This header is a cryptographic\
    \ signature created using the NP’s private signing key. The NP starts by generating\
    \ a digest of the request body using the BLAKE-512 hash function. Then, it appends\
    \ timestamp fields (created and expires) and constructs a signing string. This\
    \ string is signed with Ed25519 using the NP’s private key, and the resulting\
    \ signature is encoded in base64 and attached to the Authorization header. This\
    \ header is validated by the receiving NP (or Gateway), which retrieves the sender’s\
    \ public key using the /lookup API and verifies the signature before accepting\
    \ the request. This guarantees that the payload is authentic and untampered. In\
    \ a standard ONDC transactional flow such as /search, the Buyer App (BAP) initiates\
    \ a request to the Gateway. The Gateway first validates the Authorization header\
    \ by fetching the BAP’s public key using the /lookup API and performing signature\
    \ verification. It then validates the schema (specifically the context block)\
    \ and, if successful, signs the payload with its own private key, adding the X-Gateway-Authorization\
    \ header. The Gateway reads the domain and city from the context and broadcasts\
    \ the request to all eligible Seller Apps (BPPs) discovered via registry lookup.\
    \ After that, the flow becomes entirely peer-to-peer. Each Seller App validates\
    \ both headers, fetches public keys from the registry, and if the checks pass,\
    \ it processes the /search request. It then responds with a /on_search callback\
    \ sent directly to the Buyer App by appending /on_search to the subscriber_url\
    \ obtained via registry lookup. No further gateway involvement is needed after\
    \ the initial broadcast, making all subsequent communication directly between\
    \ network participants. Transactional Flow for IGM (Issue and Grievance Management)\
    \ Issue and Grievance Management (IGM) is a key component within the ONDC (Open\
    \ Network for Digital Commerce) ecosystem. It provides a structured and standardized\
    \ way for participants to raise, manage, and resolve disputes or issues that may\
    \ arise during or after an order is fulfilled. This could include problems such\
    \ as wrong items delivered, damaged products, delays, or payment discrepancies.\
    \ There are two versions of IGM that define how issues are handled: IGM 1.0.0\
    \ In IGM 1.0.0, the buyer is the only party allowed to raise an issue. The issue\
    \ is addressed by the seller (or the seller app), who is responsible for providing\
    \ a resolution. Issues can be raised at two levels: Item-level: Specific to a\
    \ particular item in the order (e.g., one item was damaged or missing). Fulfillment-level:\
    \ Related to the delivery or the overall order experience (e.g., delayed shipment,\
    \ incomplete order). The resolution process involves the seller responding with\
    \ possible actions like replacement, refund, or clarification. IGM 2.0.0 In IGM\
    \ 2.0.0, the process is bi-directional – meaning both the buyer and the seller\
    \ can raise issues. This version introduces greater flexibility and a more balanced\
    \ dispute resolution framework. Both parties (buyer and seller) have the ability\
    \ to: Raise an issue against each other. Respond to and resolve the issue. This\
    \ version supports a wider range of scenarios, including: Sellers raising issues\
    \ for fraudulent buyer claims. Buyers continue to raise issues related to order\
    \ problems. Issue resolution can still be based on the item or fulfillment level,\
    \ but now both parties can initiate and participate in the process actively. The\
    \ Journey of Financial Information Service (FIS) API The Financial Information\
    \ Service (FIS) API transforms the process of securing a personal loan into a\
    \ structured, transparent, and efficient journey. Through the open network, borrowers\
    \ and lenders connect seamlessly, guided by a series of well-defined steps facilitated\
    \ by the Borrower Platform (BAP) and Lender Platforms (BPPs). This narrative outlines\
    \ the journey, from the initial search for a loan to its final confirmation and\
    \ ongoing status updates, emphasizing clarity, trust, and technological precision.\
    \ Initiating the Search for Financial Opportunities: The journey begins when a\
    \ borrower, seeking a personal loan, engages the Borrower Platform (BAP). The\
    \ BAP initiates a search request, sending a query through the network’s gateway\
    \ to the registry. The registry identifies available Lender Platforms (BPPs) capable\
    \ of offering personal loan services. The gateway forwards the search request\
    \ to these BPPs, which respond with an on_search callback, publishing their loan\
    \ catalogs. These catalogs contain a variety of loan products, complete with details\
    \ such as loan types, interest rates, repayment terms, and eligibility criteria,\
    \ accessible via the Swagger Link. This transparent exchange opens a world of\
    \ possibilities, allowing the borrower to explore tailored financial solutions.\
    \ Exploring a Catalog of Loan Offers: Upon receiving the on_search response, the\
    \ BAP presents the borrower with a comprehensive catalog of loan offers from multiple\
    \ BPPs. Each offer is detailed, showcasing key information like interest rates,\
    \ loan tenures, and specific terms. This stage empowers the borrower to compare\
    \ options side by side, evaluating which loan aligns best with their financial\
    \ goals. The open network ensures that all relevant details are accessible, fostering\
    \ informed decision-making and eliminating the opacity often associated with traditional\
    \ loan searches. Selecting the Ideal Loan Product: With a clear view of available\
    \ options, the borrower selects a specific loan offer that meets their needs.\
    \ The BAP sends a select request to the chosen BPP, indicating the preferred loan\
    \ product. This action marks a pivotal moment in the journey, as the borrower\
    \ commits to pursuing a specific financial path, confident in their choice based\
    \ on the transparent information provided. Receiving Detailed Loan Information:\
    \ The lender responds with an on_select callback, acknowledging the borrower’s\
    \ selection and providing detailed information about the chosen loan product.\
    \ This response may include a dynamic form, prompting the borrower to specify\
    \ details such as the desired loan amount or repayment term. The BAP displays\
    \ this form to the borrower, ensuring a user-friendly experience as they input\
    \ the requested information, which is then relayed back to the BPP. This step\
    \ ensures the loan is tailored to the borrower’s unique requirements. Specifying\
    \ Loan Details: If a dynamic form is provided, the borrower completes it, entering\
    \ critical details such as the loan amount and preferred term. The BAP facilitates\
    \ this process, securely collecting and transmitting the information to the BPP.\
    \ This form (Loan Details) submission refines the loan offer, aligning it closely\
    \ with the borrower’s financial objectives and setting the stage for a formal\
    \ application. Formalizing the Loan Application: With the loan details submitted,\
    \ the BAP sends an init request to the BPP, formally initiating the loan application\
    \ process. This request includes the selected loan product, requested amount,\
    \ term, and any additional details gathered through the form. This step transitions\
    \ the journey from exploration to a structured engagement, signaling the borrower’s\
    \ intent to move forward with the chosen lender. Refining the Application with\
    \ Additional Information: The BPP responds with an on_init callback, acknowledging\
    \ the initialization and potentially providing additional dynamic forms to collect\
    \ further details. These forms may request Know Your Customer (KYC) information,\
    \ bank account details for loan disbursement, or e-mandate setup for repayments.\
    \ The BAP presents these form (KYC, Bank Details, e-Mandate) requirements to the\
    \ borrower, who completes and submits them. The lender also provides an initial\
    \ loan status update and may include additional terms, ensuring both parties are\
    \ aligned as the application progresses. Submitting Comprehensive Details: After\
    \ completing the additional forms, the BAP sends another init request, incorporating\
    \ the submission_id from the form submissions. This ensures all required information—KYC\
    \ documents, bank details, or e-mandate authorizations—is securely transmitted\
    \ to the BPP. The open network’s robust infrastructure guarantees that sensitive\
    \ data is handled with care, maintaining security and compliance throughout the\
    \ process. Processing and Updating the Application: The BPP processes the submitted\
    \ information and responds with an on_init callback, updating the loan application\
    \ status. This response confirms that the additional details have been received\
    \ and integrated, moving the application closer to completion. The borrower remains\
    \ informed through the BAP, which provides real-time updates on the application’s\
    \ progress, ensuring transparency and engagement. Reviewing the Loan Agreement:\
    \ As the application nears finalization, the BPP sends a form (Loan Agreement)\
    \ to the BAP, presenting the formal loan agreement for the borrower’s review.\
    \ This document outlines all terms, including interest rates, repayment schedules,\
    \ and responsibilities. The BAP displays the agreement, allowing the borrower\
    \ to review it carefully and provide an e-signature to indicate acceptance. This\
    \ step is critical, as it formalizes the borrower’s commitment to the loan terms.\
    \ Confirming the Loan Application: Once the borrower signs the loan agreement,\
    \ the BAP sends a confirm request to the BPP, finalizing the loan application.\
    \ This action solidifies the partnership between the borrower and the lender,\
    \ marking the successful completion of the application process. The open network\
    \ ensures that this confirmation is securely communicated, maintaining a clear\
    \ record of the agreement. Receiving Final Confirmation: The BPP responds with\
    \ an on_confirm callback, providing final confirmation details to the borrower.\
    \ This response confirms that the loan order is complete, and the loan is ready\
    \ for sanctioning or disbursement. The borrower receives clear communication through\
    \ the BAP, ensuring they understand the next steps, whether it’s awaiting funds\
    \ or activating repayment schedules. Monitoring Loan Status: Even after confirmation,\
    \ the journey continues with ongoing support. The BAP can send periodic status\
    \ requests to the BPP to check the loan’s progress—whether it has been sanctioned,\
    \ disbursed, or is in repayment. The BPP responds with updates, which the BAP\
    \ relays to the borrower, ensuring they remain informed at every stage. The open\
    \ network’s commitment to transparency ensures that the borrower is never left\
    \ in the dark, fostering trust and clarity throughout the loan lifecycle. Conclusion:\
    \ The journey through personal loan acquisition via the FIS API is a testament\
    \ to the power of open networks in revolutionizing financial services. By connecting\
    \ borrowers with lenders through a structured, transparent, and secure process,\
    \ the FIS API empowers individuals to make informed decisions, access tailored\
    \ solutions, and engage with confidence. From the initial search to ongoing status\
    \ updates, each step is designed to streamline the experience, build trust, and\
    \ deliver value. This journey is not just about securing a loan—it’s about empowering\
    \ borrowers to achieve their financial aspirations with clarity and control, supported\
    \ by a robust and innovative digital ecosystem. Logistic v1.2.5:- \nVersion Compatibility\
    \ for ONDC Protocol 1.2.5 introduces new baseline and enhanced features, detailed\
    \ in separate documentation:\n\n\n\nLSPs and LBNPs can selectively enable features\
    \ based on their business needs and must publish the features they support to\
    \ allow for mutual discovery. For APIs using these features, the context.version\
    \ must be set to \"1.2.5\". 1.2.5 builds upon 1.2.0: It's considered an incremental\
    \ update that layers new features over the base version 1.2.0. Compatibility Between\
    \ 1.2.0 and 1.2.5 General Backward Compatibility: Most APIs in version 1.2.5 are\
    \ backward compatible with version 1.2.0, allowing nodes (NPs) using version 1.2.0\
    \ to communicate seamlessly with those using 1.2.5.\n\nException – RTO Flow: The\
    \ updated RTO (Return to Origin) flow is not backward compatible with version\
    \ 1.2.0. Because of this, 1.2.5 and 1.2.0 are considered side-by-side compatible\
    \ rather than fully backward compatible.\n\nInteraction Scenarios:- An LBNP using\
    \ 1.2.0 may receive responses in either 1.2.0 or 1.2.5 from LSPs. An LBNP using\
    \ 1.2.5 may also receive responses in either 1.2.0 or 1.2.5.When responding with\
    \ version 1.2.5, the LSP must include the list of features it supports. An LBNP\
    \ using 1.2.5 can activate business workflows dynamically based on discovered\
    \ feature support from the LSP. Additional Notes:-Systems may implement a version\
    \ check for compatibility with \"1.2.*\" to support both 1.2.0 and 1.2.5 flexibly.\
    \ Transactional Flow for RSF (Reconciliation and Settlement Framework) Reconciliation\
    \ and Settlement Framework:- The Reconciliation and Settlement Framework (RSF)\
    \ governs how money flows between buyers, sellers, and other network participants\
    \ (NPs) on the ONDC network.  RSF 2.0 introduces a claim-based payout system where\
    \ both Buyer Apps (acting as Collectors) and Seller Apps (acting as Receivers)\
    \ submit their settlement details independently to the Settlement Agency (SA).\
    \ Here's a breakdown of the transaction flow: Standard Flow (Buyer App as Collector,\
    \ Seller App as Receiver, distinct legal entities): Order Placement and Payment:\
    \ A buyer places an order through a Buyer App and makes a payment.  The Buyer\
    \ App becomes the Collector of funds. /settle Call (Both Buyer and Seller Apps):\
    \ The Seller App (Receiver) sends a /settle call to the SA, claiming the amount\
    \ due to them (including their commission and any amount owed to the Seller on\
    \ Record). The Buyer App (Collector) also sends a /settle call to the SA, specifying\
    \ the order details and the amount to be settled. Order Matching and Reconciliation:\
    \ The SA matches the orders submitted by both the Buyer App and Seller App based\
    \ on order details. Balance Check: The SA checks if the Buyer App's account for\
    \ ONDC settlement has sufficient funds. Fund Transfer: If the balance is sufficient,\
    \ the SA instructs the banks to transfer funds: From the Buyer App's (Collector's)\
    \ account for ONDC settlement to the Seller App's (Receiver's) account for ONDC\
    \ settlement. From the Seller App's account for ONDC settlement to the Seller\
    \ on Record's bank account (if last-mile settlement is opted in by the Seller\
    \ App). From the Buyer App's (Collector's) account for ONDC settlement to the\
    \ Buyer App's (Collector's) operating account for the Buyer Finder Fee (BFF).\
    \ From the Seller App's (Receiver's) account for ONDC settlement to the Seller\
    \ App's (Receiver's) operating account for their commission. /on_settle (Settlement\
    \ Confirmation): The SA notifies both the Buyer App and Seller App about the successful\
    \ settlement, providing settlement reference numbers with status “SETTLED” or\
    \ “NOT-SETTLED”. Onboarding process with SA\nThe onboarding process with a Settlement\
    \ Account (SA) involves several steps for Network Participants (NPs) on the ONDC\
    \ network.NPs can reach out to the Settlement Agency (SA) via the contact email\
    \   provided on the ONDC website  . NPs are required to open an account for ONDC\
    \ settlement with banks onboarded on NPCI-NBBL NOCS. NPs are expected to follow\
    \ the following steps as per their respective role on the ONDC network. As a Buyer\
    \ App or Marketplace Seller App (MSN): On ONDC’s & SA’s  website, refer to the\
    \ published list of banks onboarded with SA Open an account for ONDC settlement\
    \ either with your existing bank, if it's on the published list, or with another\
    \ bank from the list Confirm that you have an account for ONDC settlement with\
    \ an SA on-boarded bank on ONDC’s NP portal Declare  on ONDC’s NP portal that\
    \ you have completed integration with SA Post go-live on the network, start making\
    \ claims to SA for receivables As an Inventory Seller App (ISN): Choose either\
    \ of the following options: Option 1: Follow steps 1 to 7 as mentioned above;\
    \ similar to Buyer App or Marketplace Seller App (MSN) Option 2: Alternatively,\
    \ follow the following steps- (A) If you will never be the Collector (take money\
    \ from the buyer directly) or will never take on-network logistics\n- don’t open\
    \ a new account for ONDC settlement with an SA on-boarded bank; and continue with\
    \ your existing bank account\n\n(B) If you will be the Collector (take money from\
    \ the buyer directly) or will take on-network logistics sometime in the future\n\
    - open a new account for ONDC settlement with an SA on-boarded bank; and continue\
    \ with your existing bank account Declare on ONDC’s NP portal that you have completed\
    \ API integration with SA Post go-live on the network, initiate receivables claims\
    \ by sharing /settle call(s) with SA Transactional Flow for Retail v1.2.0 1. Search\
    \ and Discovery /search (Buyer NP → Gateway → Seller NPs):\n Initiates a search\
    \ query from the buyer, which is propagated through the gateway to relevant Seller\
    \ NPs /on_search (Seller NPs → Gateway → Buyer NP):\n Seller NPs respond with\
    \ available products or services matching the search criteria.\n\n Key Enhancements\
    \ in v1.2.0: Support for product variants, add-ons, and customization options.\
    \ Incremental catalog refresh capability, allowing Buyer NPs to fetch only updated\
    \ catalog entries since the last refresh. 2. Product Selection and Quotation /select\
    \ (Buyer NP → Seller NP):\n Buyer selects a specific product or service, initiating\
    \ a request for detailed quotation /on_select (Seller NP → Buyer NP):\n Seller\
    \ NP provides detailed quotation, including pricing, availability, and other relevant\
    \ terms. Considerations: Handling of out-of-stock scenarios with appropriate error\
    \ messages. Inclusion of detailed fulfillment information, such as delivery timelines\
    \ and logistics options. 3. Order Initialization /init (Buyer NP → Seller NP):\n\
    \ Buyer NP initiates the order placement process, providing necessary order details.\
    \ /on_init (Seller NP → Buyer NP):\n Seller NP responds with order initialization\
    \ confirmation, including order ID and terms.\n\n Key Elements: Inclusion of provider\
    \ tax numbers for verification purposes. 4. Order Confirmation /confirm (Buyer\
    \ NP → Seller NP):\n Buyer NP confirms the order, finalizing the purchase intent.\
    \ /on_confirm (Seller NP → Buyer NP):\n Seller NP acknowledges the order confirmation,\
    \ providing final order details.\n\n Important Aspects: Digital signing of the\
    \ transaction-level contract between Buyer NP and Seller NP. Inclusion of settlement\
    \ terms and payment instructions. 5. Order Fulfillment and Tracking /status (Buyer\
    \ NP → Seller NP):\n Buyer NP requests the current status of the order. /on_status\
    \ (Seller NP → Buyer NP):\n Seller NP provides the latest status updates, including\
    \ shipment and delivery information.\n\n Enhancements: Provision of tracking URLs\
    \ and estimated delivery times. Handling of logistics through integrated logistics\
    \ partners, if applicable. 6. Order Cancellation and Returns /cancel (Buyer NP\
    \ → Seller NP):\n Buyer NP initiates order cancellation. /on_cancel (Seller NP\
    \ → Buyer NP):\n Seller NP acknowledges the cancellation request. /update (Buyer\
    \ NP → Seller NP):\n Used for initiating returns or modifications to the order.\
    \ /on_update (Seller NP → Buyer NP):\n Seller NP responds to the update request,\
    \ confirming actions taken. Key Considerations: Accurate timestamping of cancellation\
    \ and return requests. Inclusion of reasons for cancellation or return in the\
    \ response. 7. Payment and Settlement /payment (Buyer NP → Seller NP):\n Buyer\
    \ NP processes the payment for the order. /on_payment (Seller NP → Buyer NP):\n\
    \ Seller NP acknowledges receipt of payment. Settlement Process: Involvement of\
    \ Reconciliation Service Providers (RSPs) and Settlement Agencies to facilitate\
    \ fund transfers between Network Participants. 8. Post-Transaction Activities\
    \ Issue and Grievance Management:\n ONDC provides a framework for resolving disputes\
    \ and handling grievances through Online Dispute Resolution (ODR) mechanisms.\
    \ Feedback and Ratings:\n Buyers can provide feedback and ratings for products\
    \ and services, contributing to the overall trust and reliability of the network.\
    \ /search"
  tags:
  - Retail API related queries
- question: What are action and on_action calls?
  answer: action calls are made by Buyer apps to seller apps. on_action calls are
    made by Seller app to buyer apps for action calls they received. There are few
    unsolicited on_action calls made by Seller app when there is change in order status
    like on_status,on_update. Search,select,init are few action calls. On_search,on_select,on_init
    are few on_action calls.
  tags:
  - Retail API related queries
- question: What does “search by item” mean?
  answer: It means sending a search request to find catalogs from sellers that offer
    the specific item and can fulfill the order at the given drop location — based
    on GPS coordinates or area code.
  tags:
  - Retail API related queries
- question: What is an incremental catalog refresh?
  answer: An incremental catalog refresh is a lightweight update mechanism that allows
    buyer Network Participants (NPs) to refresh their cached catalogs by receiving
    only the changes since the last full catalog update. This includes modifications
    such as item updates, store closures, or store deactivations, making the process
    more efficient than sending the entire catalog each time.
  tags:
  - Retail API related queries
- question: What does ‘TTL’ mean in ONDC?
  answer: TTL (Time To Live) defines how long a message remains valid within the network.
    It ensures that requests are timely and relevant by setting an expiration duration.
    TTL is typically expressed in ISO8601 duration format — for example, PT30S represents
    30 seconds.
  tags:
  - Retail API related queries
- question: How is  Retail API contract  version 1.1.0 different from  Retail API
    contract version 1.2.0?
  answer: The current API contract is at version 1.2, while the previous version,
    1.1, has been deprecated. Version 1.1 established the basic framework for essential
    retail operations, enabling the smooth execution of the happy flow along with
    other common processes like order cancellations. To improve the overall functionality
    and coverage of the contract, version 1.2.0 was introduced. This new version not
    only aims to enhance the robustness of the API but also to better align it with
    the sophisticated functionalities found in platform ecosystems, thereby providing
    buyers with a more consistent and seamless user experience. Key improvements in
    version 1.2.0 include advanced catalog caching mechanisms, as well as support
    for additional scenarios such as product customizations, handling of variants,
    streamlined return processes, and order tracking capabilities.
  tags:
  - Retail API related queries
- question: What is the major difference between the transaction_id and message_id
    ?
  answer: 'transaction_id remains the same for the whole transaction flow i.e. for
    the discovery and fulfillment phases, the transaction_id will remain same.

    In contrast, the message_id will be unique for every pair of action and on_action
    calls. Also it’d be unique for unsolicited on_action calls'
  tags:
  - Retail API related queries
- question: How to book a demo in the staging environment?
  answer: One can book a demo through the NP Portal homepage (portal.ondc.org). Homepage>>
    Requests related to integration journey>>Book Demo slot Following document contains
    the guidelines for the demo -
  tags:
  - Retail API related queries
- question: How to move from staging to pre-prod?
  answer: 'Firstly, the NP will have to give the demo for the staging environment.
    Once the  demo is done then they will have to get their subscriber_id whitelisted
    for pre-prod. For that, NP has to submit the request for whitelisting on the NP
    Portal. Once whitelisted, they can call the /subscribe API to get registered on
    Pre-prod.


    Q: What are the compliance requirements in the pre-production stage  ? You will
    have to submit the logs for the Retails Flows, IGM (Issue & Grievance Management)
    logs and RSF (Reconciliation and Settlement Framework)  . You can submit the logs
    in the below given link: Test case scenario for Retail logs: Test case scenarios
    for IGM and RSF: After log submission, the tech team will verify the logs. Once
    cleared, the QA process is initiated. Upload the filled document and submit.'
  tags:
  - Download a copy QA questionnaire provided in resource
- question: I want to be an ISN but don't want to build a seller app. Also Dont want
    to onboard any MSN Can I be on ONDC platform?
  answer: Either of these options have to be selected. There is no other option to
    onboard ONDC.
  tags:
  - Download a copy QA questionnaire provided in resource
- question: Can we submit Pramaan logs if we don't get any seller np?
  answer: Yes Pramaan logs can be submitted but incase any flow is not supported in
    Pramaan it has to be generated with some approved seller NP or you can use reference
    seller app for log generation
  tags:
  - Download a copy QA questionnaire provided in resource
- question: No Requests Received from ONDC Network
  answer: Please check the lookup and vlookup API. Also check if your API service
    is accepting requests at url <bpp_id>?/search. If still you are not receiving
    search request kindly react out to
  tags:
  - Download a copy QA questionnaire provided in resource
- question: I am not able to see my products in one of the buyer app in production
  answer: Please connect with the respective buyer app for issue as ONDC don’t have
    control on it. In case you are not able to connect to the respective buyer, reach
    out to techsupport@ondc.org. Tech support team will help to interact with buyer
    app
  tags:
  - Download a copy QA questionnaire provided in resource
- question: 'What is the timestamp format?

    A: RFC3339 UTC format should be used for timestamp with exact 3 places for milliseconds
    value eg: 2024-03-22T12:00:01.937Z.'
  answer: 'Quick tip: Make sure that the on_action call timestamp is greater than
    the action call timestamp (as /on_action API is called after the /action API is
    received)


    Q: In /search call where to get category_id from?

    A: We have a list of category_id. Please check the list mentioned below:'
  tags:
  - Download a copy QA questionnaire provided in resource
- question: 'The quantity,price or count  should be numeric or string?

    A: Make sure that not all amounts are in string. There are two major places the
    amount is in numeric (with strictly 2 decimal places only) especially in on_action
    calls:'
  answer: Breakup array @ondc/org/item_quantity object has a count key which should
    be numeric in all on_action calls Items array has quantity object which has count
    key which should also be numeric in on_action calls after /init calls
  tags:
  - Download a copy QA questionnaire provided in resource
- question: 'What is the transaction trail of ONDC API calls?

    A:'
  answer: Request is sent from sender to recipient; Recipient acknowledges the request
    by sending an "ACK" (or "NACK" if they cannot validate the request); Recipient
    sends response through the callback for the corresponding request API e.g. /on_search
    callback for /search request; Recipient of callback (could be the original sender)
    acknowledges the response by sending an "ACK" (or "NACK" if they cannot validate
    the request); The calls from are made in order (for pre- order stage) - /search,
    /select/, /init, /confirm
  tags:
  - Download a copy QA questionnaire provided in resource
- question: What is the ‘/search’ call intended for?
  answer: "‘/search’ API is used to communicate the intent for a full or incremental\
    \ catalog refresh. It triggers the seller NP to send a refreshed catalog. \nA\
    \ full catalog refresh instructs the seller NP to send the entire catalog of items\
    \ again.\nAn incremental catalog refresh instructs the seller NP to send only\
    \ the changes in the catalog(such as item changes, store opening, store closing\
    \ etc.)"
  tags:
  - Download a copy QA questionnaire provided in resource
- question: 'What does the key “domain” refer to ?

    A: The “domain” key refers to a specific category of products or services that
    can be bought or sold through the network. For eg- ‘ONDC:RET10’ refers to Grocery
    and “ONDC:RET11 '''' refers to F&B.


    Q: What does ‘ttl’ refer to in ONDC?

    A: TTL refers to - Time to Live. It specifies the duration for which a particular
    message remains valid. TTL ensures that requests made within the network are relevant
    and recent. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds.'
  answer: 'Refer the given document to understand it better:'
  tags:
  - Download a copy QA questionnaire provided in resource
- question: 'Explain the keys days, schedule, holiday, duration, and range in the
    schedule object?

    A: Days: This field represents the days of the week when the store is open Timings
    of'
  answer: "Schedule: This object provides detailed information about the store's operating\
    \ hours, including holidays and recurring schedules. Holiday: This field contains\
    \ a list of future dates representing holidays when the store will be closed.\
    \ The dates should be in the format \"YYYY-MM-DD\". An empty array should be passed\
    \ if there are no holidays.\n   Duration: This field represents the order preparation\
    \ time in ISO 8601 duration format. It signifies the maximum time needed for the\
    \ seller to prepare the order for shipping or pickup. For example, \"PT30M\" indicates\
    \ an order preparation time of 30 minutes. Range: This object defines a continuous\
    \ time range during which the store is open. start: This field specifies the start\
    \ time of the operational hours in HHMM format. For example, \"1100\" represents\
    \ 11:00 AM. end: This field specifies the end time of the operational hours in\
    \ HHMM format. For example, \"2100\" represents 9:00 PM."
  tags:
  - Download a copy QA questionnaire provided in resource
- question: What is the start and end location in fulfillment?
  answer: 'Start: it is start location from where the order will get picked up End:  it
    is the end location where the order will get dropped.'
  tags:
  - Download a copy QA questionnaire provided in resource
- question: What is Request incremental catalog refresh (pull)
  answer: 'Request Incremental Catalog Refresh (Pull) is a process where a system
    requests only the updated or changed parts of a catalog since the last update,
    instead of retrieving the entire catalog. The Buyer NP requests a one-time incremental
    refresh: start_time is before Context.timestamp, end_time is also before Context.timestamp,
    and end_time is after start_time (meaning the Buyer NP pulls incremental updates
    between start_time and end_time in a single solicited response).'
  tags:
  - Download a copy QA questionnaire provided in resource
- question: Is there any partial cancellation supported from the buyer app?
  answer: Buyer side partial cancellation is not supported for now in the retail api
    contract
  tags:
  - Download a copy QA questionnaire provided in resource
- question: What are valid return reason codes?
  answer: 001 002 003 004 005
  tags:
  - Product delivered is different from what was shown and ordered
- question: As we are aggregating multiple buyers for multiple cities, the search
    gets initiated and every search result via the gateway results in 3 GB of data.
  answer: Search should be initiated for each city and cached on your end. Since the
    catalog includes full details of the seller app/sellers and their serviceability,
    you may ingest, process, and cache it on your side. The buyer can then search
    directly from these cached results. As the number of seller NPs and sellers on
    the network grows, the volume of resultant data will also increase. Therefore,
    effective filtering and catalog rejection processes should be implemented to eliminate
    poor-quality catalogs or payloads.Also, please note that the /on_search response
    is sent directly to the buyer app’s endpoint and not routed through the gateway.
    /on_search
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is on_search? Who sends on_search and to whom?
  answer: The /on_search call is the response from the Seller NP to the Buyer NP's
    /search request.  It contains the requested catalog data (for full refresh) or
    the incremental updates.  The Buyer NP acknowledges the /on_search response with
    an ACK or NACK.  A NACK indicates an issue with ingesting the response, such as
    missing providers, locations, or items.  The on_search response can also include
    deep links to the provider's store on the buyer app and options for the Buyer
    NP to communicate promotions.
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is the difference between a custom menu and custom group?
  answer: custom_menu is where items are displayed.category_ids is for a custom menu
    used mainly in F&B. Format of category_ids is [custom menu item id:display sequence
    within custom menu item] Custom_group is used for grouping customisation for items.custom_group
    is type of variant group
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is the difference between category_id and category_ids?
  answer: category_id is the category of that domain as mentioned in the taxonomy
    for that domain except for F&B (RET11). For RET11 it would always be F&B. category_ids
    is for a custom menu used mainly in F&B. Format of category_ids is custom menu
    item id:display sequence within custom menu item.
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is frequency in provider.locations.schedule?
  answer: Frequency and times are for timing the store will open and by how much time
    it will open. As in API contract frequency in PT4H and times are 1100 and 1900
    it means the Store will open at 1100 for next 4 hours and then will open from
    1900 to 4 hours. Either frequency and times is given or range is provided with
    timings of open to close.
  tags:
  - Product delivered is different from what was shown and ordered
- question: I have huge data. Can I send through pagination?
  answer: '- Yes you can send through pagination and all buyer apps in production
    support pagination. /select'
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is the URL for select API? When should I call select API.
  answer: After receiving catalog from seller app in on_search buyers app display
    products on their application. When the end buyer selects any item and adds it
    to the cart then select should be called. The URL of select is <bpp_uri>/select.
    bpp_uri is sent by the seller app in the context of on_search payload.
  tags:
  - Product delivered is different from what was shown and ordered
- question: Should select have the same transaction_id as in on_search?
  answer: Not mandatory. Select can have a unique transaction_id. But transaction_id
    sent in select will remain same in all future calls till order delivered or return
    date expired. Transaction_id is unique for particular order /on_select
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is the difference between 40002 and 40009 error codes?
  answer: 40002 is for out of stock 40009 is for maximum quantity limit exceeded.
  tags:
  - Product delivered is different from what was shown and ordered
- question: Can we have multiple fulfillments? Can each item in order have different
    fulfillment
  answer: There could be multiple fulfillments.The trail should  be maintained and
    tracked for each fulfillment. /init
  tags:
  - Product delivered is different from what was shown and ordered
- question: When is the init call made?
  answer: '- The /init call is made by the buyer app directly to the seller app after
    the /select call. It signifies the initiation of the order process.  The primary
    purpose of this call is to collect the buyer''s delivery and billing addresses
    and formally initiate the order.  The seller app responds to the /init call with
    the /on_init callback, confirming the order initialization and potentially providing
    additional details.  After the /init and /on_init exchange, both the buyer and
    seller apps possess the necessary product and address information to proceed further
    in the order fulfillment process.  The /init call marks the transition from product
    discovery and selection to the actual order processing stage.  It sets the stage
    for subsequent steps like payment processing and order confirmation.  The direct
    peer-to-peer communication between buyer and seller apps, established during the
    /select call, continues in the /init call, ensuring efficient and real-time information
    exchange. /on_init'
  tags:
  - Product delivered is different from what was shown and ordered
- question: When is on_inti call made?
  answer: 'The on_init call is made by the seller app in response to the init call
    from the buyer app.  The init call signifies the buyer''s intention to initialize
    an order after selecting products through the /search and /select calls.  The
    on_init call serves two primary purposes: Acknowledge Order Initialization and
    Provide Quote: The seller app acknowledges the order initialization request and
    sends back a detailed quote for the order. This quote includes the final price
    breakdown, including item costs, taxes, delivery charges, and any applicable discounts
    or offers.  This allows the buyer to review the final cost before confirming the
    order. Collect Payment (if applicable):  If the seller requires pre-payment, the
    on_init call can also include information necessary for the buyer to proceed with
    payment. This might involve redirecting the buyer to a payment gateway or providing
    payment instructions.  If the payment is handled through a separate process (e.g.,
    Cash on Delivery), this step might be skipped.'
  tags:
  - Product delivered is different from what was shown and ordered
- question: Can we use the same error codes in on_init as in on_select?
  answer: If after on_select when init was called product status has changed then
    we can use the same error codes. Validation applied on on_select should also be
    done in on_init and on_confirm /confirm
  tags:
  - Product delivered is different from what was shown and ordered
- question: When is the confirmed API call made?
  answer: The /confirm call is made by the Buyer Network Participant (BNP) to the
    Seller Network Participant (SNP) after the buyer has reviewed and accepted the
    final order details provided in the /on_init response.  It signifies the buyer's
    commitment to the purchase.  The SNP should not initiate processing or fulfillment
    of the order until it receives an ACK for the subsequent /on_confirm call.  It's
    crucial that both /confirm and /on_confirm are idempotent to handle potential
    network issues and retries.  The order id, created by the BNP and unique across
    the network, and must be the same in both the /confirm and /on_confirm calls.
  tags:
  - Product delivered is different from what was shown and ordered
- question: What should be the quote in the /confirm call?
  answer: The quote in /confirm will be the same as you got in the response of /on_init
    call
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is @ondc/org/settlement_basis?
  answer: It  indicates from when settlement window starts, enum - "delivery" (from
    delivery), "shipment" (from shipment), "return_window_expiry" (from expiry of
    return window)
  tags:
  - Product delivered is different from what was shown and ordered
- question: What is order.id?
  answer: Unique id generated by buyer app for order and sent in payload.
  tags:
  - Product delivered is different from what was shown and ordered
- question: If seller app doesn’t accept Cash on Delivery(COD) can they NACK confirm
    or they should send error in on_confirm
  answer: Seller app can NACK confirm call if they don’t accept Cash on Delivery(COD)
    /on_confirm
  tags:
  - Product delivered is different from what was shown and ordered
- question: When is the on_confirm call made?
  answer: 'The /on_confirm call is made by the Seller Network Participant (SNP) to
    the Buyer Network Participant (BNP) after receiving the /confirm call from the
    BNP.  It signifies the seller''s confirmation of the order.  Here''s a breakdown
    of the process: /confirm Call (BNP to SNP): The buyer application initiates the
    /confirm call to the seller application. This call contains the final order details,
    including items, quantities, and the agreed-upon quote (which should be the same
    as the quote received in the /on_init call).  The buyer creates a unique order_id
    at this stage. SNP Validations: Upon receiving the /confirm call, the SNP performs
    validations to ensure the order details are accurate and acceptable.  This includes
    checking item availability, pricing, and any other relevant factors.  The SNP
    does not forward the order to the merchant at this point. ACK or NACK to /confirm
    (SNP to BNP): Successful Validation (ACK): If the validation is successful, the
    SNP responds with an ACK (Acknowledgement) to the /confirm call.  This indicates
    to the BNP that the order is accepted.  The SNP creates the order in their system,
    but still does not forward it to the merchant. Validation Failure (NACK): If the
    validation fails, the SNP responds with a NACK (Negative Acknowledgement) along
    with an error code (e.g., 31002 for order validation failure). The BNP should
    then cancel the order with a specific reason code (e.g., 999). Internal Errors
    (NACK): The SNP might also send a NACK due to internal errors (e.g., HTTP 504).  This
    would include a retriable error code (e.g., 31001), prompting the BNP to retry
    the /confirm call. /on_confirm Call (SNP to BNP):  After sending the ACK to the
    /confirm call, the SNP initiates the /on_confirm call to the BNP. This call includes
    the same order_id provided by the BNP in the /confirm call, along with the final
    order details, including the quote, payment details (as in /confirm), and cancellation
    terms.  It may also include additional information like fulfillment slots, agent
    details, or e-way bill numbers (especially for logistics). BNP Validations: The
    BNP, upon receiving the /on_confirm call, performs its own validations to ensure
    the order details match what was sent in the /confirm call. ACK or NACK to /on_confirm
    (BNP to SNP): Successful Validation (ACK): If the BNP''s validation is successful,
    it responds with an ACK to the /on_confirm call.  This triggers the SNP to forward
    the order to the merchant for processing and fulfillment. Validation Failure (NACK):
    If the validation fails, the BNP responds with a NACK and an error code (e.g.,
    23002). The SNP should then cancel the order with a specific reason code (e.g.,
    998) and notify the BNP of the cancellation through an /on_status call. Internal
    Errors (NACK):  Similar to the /confirm call, the BNP might send a NACK due to
    internal errors, prompting the SNP to retry the /on_confirm call. Retries and
    Cancellation: Both the /confirm and /on_confirm calls should be idempotent.  If
    either party doesn''t receive an ACK/NACK within a defined retry interval, they
    should cancel the order with the appropriate reason code.  This ensures that orders
    are not left in an undefined state.'
  tags:
  - Product delivered is different from what was shown and ordered
- question: What happens if an item goes out of stock when the buyer sends a confirmation
    call for ORDER? Should we NACK it or send an error message in on_confirm?
  answer: Seller should send an error message with out-of-stock just as it is sent
    in on_select. /status
  tags:
  - Product delivered is different from what was shown and ordered
- question: When to call /status API
  answer: The /status call is a request initiated by the Buyer Network Participant
    (Buyer App) to the Seller Network Participant (Seller App) to retrieve the current
    status of an order.  It uses the same transaction_id that was used for the /confirm
    call when the order was placed. This ensures that the status request is linked
    to the correct order. /on_status
  tags:
  - Product delivered is different from what was shown and ordered
- question: Do we need to call status every time for new on_status?
  answer: status call is made to get the real time status of order. Unsolicited on_status
    are sent by the seller whenever there is change in fulfillment of order like order-picked,order
    out-for-delivery,order delivered etc. /update
  tags:
  - Product delivered is different from what was shown and ordered
- question: '- When update settlement is triggered by the buyer app?'
  answer: '- When /on-update with fulfillment Liquidated or Return_Delivered/Return_Dispose
    is triggered by seller app then buyer app triggers update settlement /on_update'
  tags:
  - Product delivered is different from what was shown and ordered
- question: '- What is Liquidated? How it is different from reverse qc.'
  answer: -There are two types of return:- 1. Where the item is returned to the seller.
    2. Seller does not want product back and will refund returns Examples:- The buyer
    wants to return the shirt due to its size. Buyer initiates return. The seller
    wants the product to be shipped back. This is reverse qc The buyer wants to return
    Pizza due to its taste. Buyer initiates return. The seller doesn't want the product
    to be shipped back. Still the seller will refund. This is liquidated.
  tags:
  - Mobility & Travel FAQs
- question: Where can I find resources like test scenarios, log validation utilities,
    sandbox environments, and mock servers for ONDC integration?
  answer: 'ONDC provides a variety of resources to help participants streamline their
    integration and testing processes. These include: Test Scenarios – Refer to LogSubmission-UI
    in the developer guide. – Used to validate request/response logs for various domains.
    Sandbox Environment –Refer to Sandbox-UI in the developer guide Mock Servers /
    Reference Applications – Sample apps for buyer/seller roles to assist in integration
    and QA. You can access these tools and resources from the .'
  tags:
  - Mobility & Travel FAQs
- question: 'How many domains are there inside mobility?

    A: We have five domains in mobility:

    TRV10 - Ride hailing'
  answer: TRV11 - Unreserved ticketing (Metro & Bus) TRV12 - Reserved ticketing (Intercity
    buses and flights) TRV13 - Accommodation booking TRV14 - Unreserved Entry Passes
    (Experiences)
  tags:
  - Mobility & Travel FAQs
- question: How many flows are present in TRV10?
  answer: There are 16 flows present in TRV10 BPP Collecting - Payment Confirmation
    On-Demand - Assign driver on on-confirm On-Demand - Assign driver post on-confirm
    On-Demand - Purple Tags (Assign driver on on-confirm) On-Demand - Assign driver
    post on-confirm(Self-Pickup) On-Demand - Ride cancellation by driver On-Demand
    - Ride cancellation by rider Driver not found on on_confirm Driver not found post
    on_confirm On-Demand - Ride with multiple stops On-Demand - Update Stop On-Demand
    - Pre Order Bid On-Demand - Post Order Tip On-Demand - Rental Schedule - Rental
    Schedule - Trip On-Demand - Rental (when end stop GPS coordinate is present)
  tags:
  - Mobility & Travel FAQs
- question: 'How many flows are present in TRV11?

    A: There are 16 flows present inside TRV11'
  answer: IntraCity - Delayed Cancellation Flow (Rejected) IntraCity - Delayed Cancellation
    Flow (Successful) IntraCity - GPS Based Flow IntraCity - Purchase Journey Flow
    (Code Based) IntraCity - Search Pagination Flow (Code Based) IntraCity - Unlimited
    Passes Flow (Code Based) IntraCity - User Cancellation Flow IntraCity - Vehicle
    Based Confirmation Flow IntraCity - Technical Cancellation Flow Metro - Cancel
    Flow Metro - GPS Based Flow Metro - Station Code Based Flow Metro - Delayed Cancellation
    Flow (Rejected) Metro - Delayed Cancellation Flow (Accepted) Metro - Technical
    Cancellation Flow Metro - End Stop Update Flow
  tags:
  - Mobility & Travel FAQs
- question: What is the log submission process?
  answer: Create a fork of the  repository. Commit your logs in the folder (logs should
    include request & response payloads for all enabled APIs as per the scenarios
    below) Once submitted, please refer to the comments on the logs submitted and
    update the PR based on the comments provided Once the reviews are done, the PR
    will be merged and the logs shall be considered as approved on pr merge
  tags:
  - Create PR and label it with your domain name
- question: What is the Log verification process?
  answer: 'Let’s consider an example of TRV11: To verify your logs, you can use the
    POST method exposed at  within the . Available flows are: METRO_STATION_CODE METRO_GPS
    METRO_USER_CANCEL METRO_TECHNICAL_CANCEL INTRACITY_STATION_CODE INTRACITY_GPS
    INTRACITY_USER_CANCEL INTRACITY_TECHNICAL_CANCEL The payload structure for validation
    is as follows: { "domain": "ONDC: TRV11", "version": "2.0.0", "flow": "STATION_CODE",
    "payload": { "search_1": {}, "on_search_1": {}, "search_2": {}, "on_search_2":
    {}, "select": {}, "on_select": {}, "init": {}, "on_init": {}, "confirm": {}, "on_confirm":
    {}, "status": {}, "on_status": {} } }'
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is TRANSIT_STOP and INTERMEDIATE_STOP in TRV11?
  answer: The TRANSIT_STOP station is a change stop for moving to another line in
    the metro context. An INTERMEDIATE_STOP station is a normal stop/ station on the
    metro route.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is SJT and RJT  in TRV 11?
  answer: SJT is a single journey ticket from station A to station B RJT is a round
    journey ticket which includes onward and return trip also from point A to point
    B.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are BUYER_FINDER_FEES?
  answer: Buyer Finder Fees are charges associated with finding and connecting buyers
    to sellers in a transaction. These fees are either in percentage format of the
    total transaction value or a fixed value.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: Why are there two searches and on-search in metro TRV11?
  answer: At the very first search, it gives the result to all the metro routes available
    while on the second search, it gives the metro list from one endpoint to another
    endpoint between two stations.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: Why are fulfilment IDs?
  answer: Based on the search there can be multiple routes to reach a destination
    from one endpoint to another. So, everyone has its own ID that's called fulfillments
    with all the in-between stations.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are category IDs?
  answer: A person may have different kinds of tickets. Some have counter tickets,
    some have passes, and some have QR code scanners so each one has its own categorization
    ID which is called categoryID.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are the available items for purchase in case of metro? What are the
    available items for purchase?
  answer: 'Mobility offers two main types of items: Single Journey Ticket (SJT), Round
    Journey Ticket (RJT).'
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: Are there any limits on the quantity of items I can purchase?
  answer: Yes, there are quantity limits for each item that are provided by the seller
    app in the item object.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: Can I purchase items from multiple categories in a single transaction?
  answer: Yes, you can purchase items from multiple categories in a single transaction.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is the purpose of the Select call in the Buyer Platform (BAP) and
    Seller Platform (BPP) interaction?
  answer: The Select call is used within the Buyer Platform (BAP) to indicate the
    selection of specific items for purchase from the Seller Platform (BPP).
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is the significance of the "items" section within the Select call
    message?
  answer: The "items" section specifies the items selected for purchase, including
    their unique IDs and the quantity selected by the buyer.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is a quote in the context of a transaction?
  answer: A quote represents the estimated cost provided by a seller (or provider)
    for selected items or services, typically including details such as the total
    price and a breakdown of individual charges.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are the components included in the "breakup" section?
  answer: The "breakup" section typically includes titles specifying different charge
    types (e.g., base fare, taxes, fees) and corresponding details such as the selected
    items or services contributing to each charge and their respective prices.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is a fulfilment in transportation services?
  answer: Fulfilment refers to the complete journey or trip or route provided by a
    transportation service, for example a trip is from the starting point to the final
    destination, including any intermediate stops along the route.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: How can I access the terms and conditions of the booking?
  answer: The terms and conditions are provided through a static URL included in the
    "SETTLEMENT_TERMS" descriptor. You can access the terms by following the provided
    URL.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are the cancellation terms?
  answer: The cancellation terms outline the conditions and procedures for cancelling
    a booking or transaction.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What type of information does the "GTFS" descriptor refer to?
  answer: The "GTFS" descriptor typically refers to General Transit Feed Specification,
    which is a standardized format for public transportation schedules and associated
    geographic information.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is GTFS real-time?
  answer: GTFS-realtime is an extension of GTFS that allows public transportation
    agencies to provide real-time updates about vehicle locations, arrival predictions,
    and other service alerts.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are SETTLEMENT_TERMS?
  answer: Settlement Terms refer to the specific conditions and arrangements agreed
    upon between parties involved in a transaction regarding the settlement process.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is the SETTLEMENT_WINDOW?
  answer: The Settlement Window refers to the time frame within which settlement of
    the transaction must occur from the settlement_basis event. If it is like PT60M,
    which means 60 minutes.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is SETTLEMENT_BASIS?
  answer: Settlement Basis determines the event or method or conditions under which
    settlement will take place. In this context, it is set to "Delivery," indicating
    that settlement occurs upon delivery of the goods or services.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is SETTLEMENT_TYPE “UPI” referring to?
  answer: SETTLEMENT_TYPE is a payment method through which NPs pay for any item for
    example UPI, NEFT RTGS etc.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: Is MANDATORY_ARBITRATION required in this agreement?
  answer: Yes, MANDATORY_ARBITRATION  is required as indicated by the value "true."
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is the COURT_JURISDICTION specified in this agreement?
  answer: The COURT_JURISDICTION is New Delhi, indicating that legal matters arising
    from the transaction would be subject to the jurisdiction of courts in New Delhi.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is DELAY_INTEREST?
  answer: DELAY_INTEREST refers to the interest charged in the event of a delayed
    settlement.
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: Why are there two cancel calls in the cancellation process?
  answer: 'In the cancellation process, there are two instances of cancelling: one
    for a soft cancel and another for confirming the cancellation. During a soft cancel,
    we inquired with the customer, "Are you sure you want to cancel?" along with provision
    of cancellation fees applicable if any. If the customer confirms, we proceed with
    the confirm cancel action, effectively cancelling the process and updating the
    quote object and the order object.'
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are stop authorization types in TRV10 (on demand)?
  answer: There are two authorization types present in TRV 10 OTP (One time password)
    QR (Quick Response code)
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are fulfilment states present inside TRV10 (on demand)?
  answer: 'RIDE_STARTED: Describes when the rider initiates the journey. RIDE_ASSIGNED:
    Describes the state when a ride is assigned. RIDE_ENROUTE_PICKUP: Ride en route
    to pick up RIDE_ARRIVED_PICKUP: Describes the state when the rider arrived at
    the pickup point. RIDE_ENDED: Describes when the rider concludes the journey.
    RIDE_CANCELLED: The rider has cancelled the ride'
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are payment types present inside TRV10 (on demand)?
  answer: 'There are three payment types present inside TRV10 PRE-ORDER: Payment occurs
    prior to order placement ON-ORDER: Payment occurs on order placement ON-FULFILMENT:
    Payment occurs upon the completion of the journey'
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What is the SETTLEMENT_AMOUNT?
  answer: The amount of settlement of the Settlement Basis within which the Payment
    Collector will settle with counterparty Network Participant(s).
  tags:
  - The API call sequence inside the payload object might differ based on different
    flows
- question: What are STATIC_TERMS inside a payment object?
  answer: 'This will be the URL of a web page where the standard Terms and Conditions
    of the Network Participant - which are not covered in the API Specification (e.g.:
    indemnity) - will be hosted. These terms will apply to the transaction, in addition
    to the terms decided through the ONDC Protocol. If there is a conflict between
    the terms decided through the Protocol, and the Static Terms, the terms decided
    through the ONDC Protocol will prevail. Also, if there is a conflict between the
    Static Terms and the ONDC Network Policy or the Static Terms and the Network Participant
    Agreement, the terms of the ONDC Network Policy or the Network Participant Agreement
    (as the case may be) will prevail.'
  tags:
  - Logistics Related Queries
- question: Who can procure logistics services and how?
  answer: Logistics Service Providers (LSPs) directly engage with sellers, who function
    as logistics buyers. Retail sellers then call action API requests to the logistics
    service providers and receive corresponding on_action responses from them. Additionally,
    the buyer app also has the capability to procure logistics services.
  tags:
  - Logistics Related Queries
- question: Why is there no select and on-select call in the logistics contract?
  answer: "There's no \"select and on select\" process because once the retail buyer\
    \ builds a cart (in /select call), the seller app starts searching for logistics\
    \ service providers to fulfil the order. LSPs send their catalog of available\
    \ options through /on_search. Logistics buyer which is also the retail seller\
    \ then goes ahead with one of the LSP and cascades back the delivery charges in\
    \ /on_select of the retail contract. Therefore when the buyer app sends the/ init\
    \ request, the logistics buyer also initialises the logistics order with the chosen\
    \ LSP. From then on, all subsequent calls are cascaded. \n\nB. For standalone\
    \ logistic implementation api calls will be as per logistic api contract search\
    \ /search"
  tags:
  - Logistics Related Queries
- question: What does the categoryId represent in the message?
  answer: Category ID represents the type of delivery wanted by the logistics buyer.
    It can be standard Delivery, Immediate Delivery and Express Delivery etc.
  tags:
  - Logistics Related Queries
- question: What are the different types of delivery options available?
  answer: "Below are the Delivery options: 1. Express Delivery Mode: By air Applicable\
    \ for: P2H2P (Point to Hub to Person) Explanation:\n This is the fastest delivery\
    \ method. Goods are transported by air from the pickup point to a hub and then\
    \ delivered to the final destination. Best suited for time-sensitive shipments.\
    \ 2. Standard Delivery Mode: By surface Applicable for: P2P (Point toPoint) and\
    \ P2H2P Explanation:\n A common and cost-effective option using surface transport.\
    \ Slower than air, but suitable for shipments that are not extremely time-sensitive.\
    \ Can be used for both direct point-to-point and hub-based delivery models. 3.\
    \ Immediate Delivery Time Limit: S2D (Search to Delivery) ≤ 60 minutes Explanation:\n\
    \ Ultra-fast delivery, typically for hyperlocal services. The entire order—from\
    \ request to drop—is completed in under 60 minutes. 4. Same-Day Delivery Explanation:\n\
    \ The item is delivered on the same calendar day the order is placed. 5. Next-Day\
    \ Delivery Explanation:\n The item is delivered the day after the order is placed."
  tags:
  - Logistics Related Queries
- question: What is the payment type for the delivery?
  answer: There are 3 types of payment options. "ON-ORDER" (prepaid), "ON-FULFILLMENT"
    (CoD), "POST-FULFILLMENT" (post fulfillment).
  tags:
  - Logistics Related Queries
- question: What is the provider object in the search call?
  answer: Provider object indicates the details of the retail seller or the logistics
    buyer, including the time when seller/LBNP is available, or the holidays when
    the seller/LBNP store will be closed. Order preparation time can also be provided
    by the seller/LBNP in case of hyperlocal orders.
  tags:
  - Logistics Related Queries
- question: What is "@ondc/org/payload_details" inside the payment object?
  answer: This information is provided by the logistics buyer regarding the product
    details, including dimensions (length, breadth, and height), type of category,
    and whether it is classified as dangerous goods. These details were sent to the
    logistics seller by the logistics buyer during the /search call.
  tags:
  - Logistics Related Queries
- question: What range and durations define a search call?
  answer: Duration refers to the order preparation time, indicating the estimated
    time for logistics readiness (ready_to_ship). The range defines the store's order
    pickup timings. When specified in "days," it means the store's pickup hours are
    from 11:00 AM to 9:00 PM (1100 to 2100) from Monday to Sunday.
  tags:
  - Logistics Related Queries
- question: What is the "Return" fulfillment type, and when is it used?
  answer: The "Return" fulfillment type is a crucial aspect of the ONDC network's
    order management process, specifically designed to handle return requests from
    buyers. It is used when a buyer wishes to return one or more items from a previously
    delivered order. A "Return" fulfillment is created when a buyer initiates a return
    request for one or more items within the defined return window of the purchased
    items. This return window is specified in the product catalog.
  tags:
  - Logistics Related Queries
- question: What is the payment type ON-FULFILLMENT, ON-ORDER, POST-FULFILLMENT?
  answer: '"ON-ORDER" refers to a prepaid order. "ON-FULFILLMENT" refers to a cash-on-delivery
    (COD) order, where payment is made upon delivery. "POST-FULFILLMENT" refers to
    a consolidated payment made after multiple deliveries from the logistics service
    provider (LSP). In case of post fulfillment LSP will define the settlement_window
    which refers that within that days payment need to be settle Payment Wallet refers
    to the Payment Wallet process for Logistics Service Providers (LSPs), enabling
    them to establish a prepaid wallet system for logistics buyers. Payments for services
    are deducted directly from this wallet, ensuring a seamless and efficient transaction
    process. A prepaid payment system for logistics can be facilitated through a payment
    wallet managed by the Logistics Service Provider (LSP) on behalf of the Logistics
    Buyer Network Partner (LBNP).

    Payment wallet can be used when you want LBNP to pay at the confirmation of the
    order and not later.'
  tags:
  - Logistics Related Queries
- question: Is it mandatory to send an RTO item in on_search call?
  answer: Yes, it is mandatory to send the RTO item associated with the items array.
    The logistic service provider must provide details for both forward and backward
    items.
  tags:
  - Logistics Related Queries
- question: What is the item descriptor code P2P and P2H2P?
  answer: P2P stands for point-to-point and P2H2P stands for point-to-hub-to-point.
    These codes indicate the type of shipment. P2P is used for hyperlocal deliveries
    where the rider delivers the package directly from the pickup location to the
    drop-off location. P2H2P is used for intercity deliveries where the package is
    routed through a hub. P2H2P fulfillments require different packaging and an Air
    Waybill (AWB) number. This information is required for merchants to decide on
    the packaging required for shipment. /on_search
  tags:
  - Logistics Related Queries
- question: What is bpp/provider?
  answer: Bpp/provider denotes different kinds of providers that are serviceable to
    that area with that requirement of delivery type.
  tags:
  - Logistics Related Queries
- question: What is the timestamp in categories?
  answer: The timestamp within the category indicates when the delivery is scheduled.
    For example, if it's for same-day delivery, it should match the current date in
    the context timestamp. If it's for next-day delivery, it will be one day later
    than the current context timestamp, and the same applies for other types of delivery.
  tags:
  - Logistics Related Queries
- question: Where will the catalog response be sent to?
  answer: The catalog response will be directly sent to the logistics buyer.
  tags:
  - Logistics Related Queries
- question: What is RTO (Return to Origin) service?
  answer: RTO, or Return to Origin, is a service where the courier returns the package
    to its origin (sender) due to various reasons such as undeliverable address, recipient
    refusal, or any other issue preventing delivery. LSP Courier Inc. provides this
    service efficiently.
  tags:
  - Logistics Related Queries
- question: What are forward and backward shipments?
  answer: 'Forward shipment is relatively simple: the logistics buyer provides the
    start and end locations for the order to be delivered. However, reverse shipment,
    also known as backward shipment, occurs when the buyer refuses the order or for
    any other reason does not want the product anymore. In such cases, the order or
    product needs to be returned to the place from which it was originally picked
    (RTO). /init & /on_init'
  tags:
  - Logistics Related Queries
- question: What is the payment object in the Init call?
  answer: In the /init call, the payment object specifies the payment method and the
    entity responsible for collecting payment from the end buyer, along with settlement
    details. If "collected_by" is BPP, the logistics service provider will handle
    payment collection, as seen in Cash on Delivery (COD) transactions. Within the
    settlement_details, information regarding the party with whom the payment needs
    to be settled will be provided. If the payment mode is "ON_ORDER", the Buyer App
    (BAP) will collect payment from the buyer. In this scenario, the Logistics Service
    Provider (LSP) will provide their details in on_Init call for the settlement of
    the delivery charges.
  tags:
  - Logistics Related Queries
- question: What does the "price" section indicate in the quote?
  answer: The "price" section specifies the total price of the quoted item or service.
    For example, the total price is 59.00 Indian Rupees (INR). This will be tax inclusive.
  tags:
  - Logistics Related Queries
- question: What is the purpose of ttl inside the quote object?
  answer: How long will the price mentioned in the quote object remain valid? For
    example, if the quote is P1D it means the quote is valid for one day. Post which
    if LBNP confirms the order then LSP can respond with NACK.
  tags:
  - Logistics Related Queries
- question: What are cancellation_terms? Does this need to be sent? What if LBNP does
    not accept it?
  answer: 'During the pre-order flow, the Logistics Service Provider (LSP) defines
    the cancellation terms, which apply to cancellations initiated by either the LSP
    or the Logistics Buyer Network Participant (LBNP). These terms specify the fulfillment
    state at which an order can be canceled and the applicable charges based on the
    order’s status at the time of cancellation: If the order is canceled while in
    the pending state, no cancellation charges will be applied. If the order is canceled
    after pickup, agent assigned or while out for delivery, a 100% cancellation charge
    will be applied. If the LBNP does not agree with the defined cancellation terms,
    they have the option to reject (NACK) the /on_init or /on_confirm callback using
    error code 62505.'
  tags:
  - Logistics Related Queries
- question: What are the instructions object in start and end object of fulfillment?
  answer: The instructions object within the start and end sections of a fulfillment
    provides clear pickup and delivery guidelines. This ensures a seamless process
    by guiding both the buyer and the delivery agent. Order verification is conducted
    using a Pickup Confirmation Code (PCC) at pickup and a Delivery Confirmation Code
    (DCC) at delivery.
  tags:
  - Logistics Related Queries
- question: What is the purpose of the update call?
  answer: 'In logistics, the update call is primarily used to mark an order ready
    to ship.

    Additionally, it can be used to update authorization OTPs and linked order details
    by LBNP.'
  tags:
  - Logistics Related Queries
- question: What is the difference between update and status call?
  answer: '1. Update Call: In logistics, the update call is primarily used to mark
    an order as ready to ship. Additionally, it can update authorization OTPs and
    linked order details. 2. Status Call: The /status call in ONDC logistics allows
    the logistics buyer app to request the current status of an order. In response,
    the logistics seller app uses the /on_status endpoint to provide the order''s
    current status. This communication helps keep the buyer app informed about the
    progress of their order.'
  tags:
  - Logistics Related Queries
- question: What does the "breakup" section represent in the quote?
  answer: The "breakup" section provides a detailed breakdown of the total price into
    its constituent parts. Each part typically represents different components contributing
    to the total cost, such as delivery charges, taxes, etc.
  tags:
  - Logistics Related Queries
- question: How do cancellation terms vary based on fulfilment state?
  answer: Cancellation terms can differ based on the fulfilment state. Various stages
    of fulfilment may result in distinct cancellation fees or penalties. For example,
    cancelling an order while it's in a pending state may or may not involve any cancellation
    charges. However, once an agent is assigned or the order is picked up, cancellation
    charges may be incurred upon cancelling the order.
  tags:
  - Logistics Related Queries
- question: What is meant by "fulfilment state" in cancellation terms?
  answer: The fulfillment state represents the status of an order before cancellation,
    such as pending, agent-assigned, order-picked-up, or out-for-delivery. It helps
    determine the applicable cancellation terms based on the transaction stage.
  tags:
  - Logistics Related Queries
- question: What is PCC?
  answer: PCC stands for Pickup Code, which serves as verification for the rider arriving
    to collect the order. It's categorised into enums, where, for instance, 2 corresponds
    to merchant order number, 3 to other pickup confirmation codes, and 4 to OTP.
  tags:
  - Logistics Related Queries
- question: When can we initiate a search call for logistics?
  answer: If it is a cascaded flow, logistics search can be initiated after receiving
    a retail /select call. If it is an uncascaded flow, it can be initiated when LBNP
    wants to search for a logistics provider. B. Non cascaded flow is independent
    logistics flow. In non cascaded flow search calls are made after a retail order
    is confirmed. LBNP triggers search after order is placed. In /on_select seller
    sends estimated delivery charges. SNP have to procure logistics and bear the cost
    if estimated delivery charges are less as compared to charges sent by LSP in on_search
  tags:
  - Logistics Related Queries
- question: Where can I find the logistic API contract?
  answer: Logistic version v1.2.0 Link:- Logistic v1.2.5 Link:-
  tags:
  - Logistics Related Queries
- question: Is there any different API contract for logistic B2B and logistic B2C?
  answer: 'Yes, there is developer docs for B2B and Api contract for B2C

    B2B Developer guide:- B2C Api contract :-'
  tags:
  - Logistics Related Queries
- question: What is the provider object in the search call?
  answer: 'The provider object in the search call for Logistics gives a rundown of
    the retail seller or the logistics buyer. It''s like a snapshot of their operational
    details. Here''s a breakdown: Availability: It tells you when the seller or Logistics
    Buyer Network Participant (LBNP) is open for business. This includes their working
    days and hours. Closures:  It specifies any holidays or planned closures for the
    seller/LBNP store. Preparation Time (Hyperlocal): For hyperlocal orders, the seller/LBNP
    can indicate how long it takes them to get an order ready. Example: Let''s imagine
    a grocery store using the ONDC network. Their provider object in a search call
    might look like this: "provider": { "id": "G12345", // Unique ID of the grocery
    store "time": { "days": [1, 2, 3, 4, 5, 6], // Open Monday to Saturday "schedule":
    [ { "from": "09:00", // Opens at 9 AM "to": "21:00"  // Closes at 9 PM } ], "holidays":
    [ { "from": "2023-12-25", // Closed on Christmas Day "to": "2023-12-25" } ] },
    "descriptor": { // ... other details about the store ... } } In essence, the provider
    object helps the buyer app understand the seller''s operational hours and plan
    the logistics accordingly.'
  tags:
  - Logistics Related Queries
- question: What scenarios are required to be tested for log verification for B2C?
  answer: Test case scenario for B2C Link:- Q. After which retail API we can initiate
    a search request to logistics. Once the order is selected by the end user (buyer)
    in the /select call, the retail seller — now acting as the LBNP — can initiate
    the /search call to the LSP. Q. When can we initiate a search call for logistics?
    The /search call must be initiated by the LBNP (buyer) and sent to the gateway
    URL. The gateway will then broadcast this request to all sellers who can service
    the item or are available in the specified area. Below are the Gateway URL for
    each environment:- Staging:- https://staging.gateway.proteantech.in/search Pre-Production:-
    https://preprod.gateway.ondc.org/search Production:- Q. What does @ondc/org/payload_details
    tags defines @ondc/org/payload_details specifies the length, breadth, height,
    and overall dimensions of the packages to be delivered. It also includes the actual
    item price and its category, indicating whether the item is classified as a dangerous
    good or not. Q. What is forward and backward shippment? A forward shipment refers
    to the process where the logistics buyer (LBNP) provides both the pickup (start)
    and drop-off (end) locations to facilitate the delivery of an order to the end
    customer. This is the standard flow for delivering a product once an order is
    placed. On the other hand, a reverse shipment (also known as a backward shipment
    or return to origin - RTO) occurs when the end customer refuses to accept the
    order, cancels it after dispatch, or initiates a return for any reason (e.g.,
    damaged item, incorrect product, or no longer needed). In such cases, the logistics
    provider is responsible for picking up the product from the customer's location
    and returning it to the original seller's location or warehouse.
  tags:
  - Logistics Related Queries
- question: What is RTO initiated and RTO Disposed?
  answer: RTO (Return to Origin) is a key part of the order fulfillment lifecycle
    and involves multiple stages. Two critical states in this process are "RTO-Initiated"
    and "RTO-Delivered" or "RTO-Disposed". RTO-Initiated This state marks the beginning
    of the return-to-origin process. It is triggered when the forward delivery attempt
    fails due to reasons such as recipient refusal, an undeliverable address, or other
    valid causes. At this point, the item is prepared for return to its original pickup
    location. The timestamp recorded in this state represents the official start of
    the RTO process. The location typically reflects the last delivery attempt location,
    where the delivery failed. RTO-Delivered / RTO-Disposed These states indicate
    the closure of the RTO cycle. RTO-Delivered signifies that the item has been successfully
    returned to the original pickup location. The timestamp for this state marks the
    completion of the return journey. The associated location is usually the seller's
    warehouse or the origin point of the shipment. RTO-Disposed indicates that the
    item has been discarded instead of being returned. This usually applies to goods
    that are perishable, damaged, or otherwise not fit for return. The timestamp here
    marks the completion of the disposal process, and the location corresponds to
    where the item was disposed of. Q. On which call RTO can be initiated? RTO can
    be initiated in an unsolicited / solicited /on_cancel event. In such cases, a
    return (RTO) fulfillment entry will be added immediately after the original delivery
    fulfillment within the fulfillments array. This RTO fulfillment will include a
    timestamp indicating when the return process was initiated.
  tags:
  - Logistics Related Queries
- question: What is meant by "fulfilment state" in cancellation terms?
  answer: 'The fulfillment state determines the applicable cancellation fee at each
    stage of the order. Based on the current fulfillment state, a specific cancellation
    fee may be charged. This information must be provided by the LSP. Q. What is the
    "Return" fulfillment type, and when is it used? A return-type fulfillment works
    just like the regular delivery flow, starting from the /search call and going
    through all the usual steps until the final API call. The only difference is that
    it clearly shows the item is being returned by the customer. In this case, the
    start location will be the customer''s address, and the end or delivery location
    will be the LBNP''s location or warehouse. Q. What is the purpose of Authorization
    in the start and end object of fulfillment? A.The authorization object within
    fulfillment/start defines the method used to authorize the pickup of an item,
    commonly referred to as the PCC (Pickup Confirmation Code). There are different
    enum values for PCC, such as: "2" – Merchant order number "3" – Other pickup confirmation
    code "4" – OTP "5" – Static OTP Q. What is the purpose of the @ondc/org/settlement_details
    tag, and in which call should it be sent? A. This tag contains all the settlement
    details, including information such as the settlement counterparty, settlement
    type, beneficiary name, UPI address, bank account number, and IFSC code. If the
    payment mode is UPI, the account number and IFSC code are not required. If the
    LBNP is the payment collector, then in the /on_init call, the LSP must provide
    their settlement details. If the LSP is the collector, then the LBNP must send
    their settlement details in the /init call. { "settlement_counterparty":"lbnp",
    "settlement_type":"upi", "beneficiary_name":"xxxxx", "upi_address":"gft@oksbi",
    "settlement_bank_account_no":"XXXXXXXXXX", "settlement_ifsc_code":"XXXXXXXXX"
    } Q. What is the purpose of Authorization in the start and end object of fulfillment?
    A. The authorization fields in the start and end sections specify the Pickup Confirmation
    Code (PCC) and Delivery Confirmation Code (DCC), respectively. These indicate
    the type of authorization required during pickup and delivery. Q. Is it mandatory
    to send ready to ship as yes in /confirm call only? A. This information must be
    sent by the LBNP once the order is ready to be shipped. If the order isn’t ready
    at the time of the /confirm call, the LBNP should update the order later by setting
    the "ready to ship" flag to yes in the /update call. Q. What is the cancellation
    reason code? A. The cancellation reason code indicates the specific reason for
    which an order is being cancelled. Each reason is associated with a unique code
    that must be provided when cancelling an order. Please refer to the links below
    for the list of reason codes. Cancellation reason code link:- Q. What is the timestamp
    in fulfillment inside the start and end object?  When does it need to be sent?
    A. The timestamp inside the start object represents the actual time the order
    is picked up. It should not be included before the pickup happens—only once the
    order has been picked up should this timestamp be provided. The same applies to
    the end object: its timestamp should only be included after the order has been
    delivered, either to the end customer or returned to the origin. Before delivery,
    this timestamp is not required. Q. What does the "price" section represent in
    the quote? A. The price field represents the total consolidated amount of all
    items listed in the breakup array. For example, if the breakup array includes
    four components—such as delivery charge, delivery tax, RTO charge, and RTO tax—the
    sum of all these individual amounts will be used as the final quote.price. Q.
    What range and durations define in search call A. The duration field represents
    the estimated order preparation time, indicating when the order is expected to
    be ready for shipment. This helps the LSP optimize task scheduling and resource
    allocation. The range field defines the time window for store order pickups. It
    means the store is available for pickups from 11:00 AM to 9:00 PM, Monday through
    Sunday. Eg:- "range": { "start":"1100", "end":"2100" } Q. Is it mandatory to send
    rto item in /on_search call? A.Yes, the LSP is required to provide details for
    both forward and reverse (RTO) shipment fulfillment. If the RTO item details are
    not included, the LBNP has the right to respond with a NACK. Q. What is the start
    and end object in fulfillment? A. The start location refers to where the order
    needs to be picked up, while the end location indicates where the order should
    be delivered. In the start object, if any form of pickup authorization is needed
    (like a pickup code), it will be included in the authorization field. Similarly,
    the end object will contain delivery-related details such as the delivery location,
    and if required, the delivery authorization information will also be present.
    Q. What does the reverse_qc tag represent? A. A reverse QC (Quality Check) online
    checklist may be provided when the fulfillment.type is set to "Return". This checklist
    helps ensure that returned items meet specific quality criteria before being accepted
    back into the system. It may include checks for item condition, packaging, completeness,
    and any visible damage. Providing this checklist allows for a more standardized
    and transparent return process, enabling the LSP or seller to make informed decisions
    about accepting or rejecting returned goods. Q. What is the timestamp in categories?
    A. The timestamp in the categories object indicates the estimated date of delivery
    for the order. It reflects the Turnaround Time (TAT) based on the delivery type—same
    day for Immediate Delivery (SDD), next day for Next Day Delivery (NDD), or an
    appropriate future date for other delivery categories. If the category_id is for
    Same Day Delivery, the timestamp should match the same date as the context.timestamp.
    For Next Day Delivery, it should be the following day. The same logic applies
    to other category IDs, with the timestamp reflecting the appropriate estimated
    delivery date accordingly. Q. In which case shipping labels need to be sent and
    on which call? A. A shipping label is required for orders with the P2H2P order
    type, but not for P2P orders. It can be shared either in the /on_confirm call
    by the logistics seller (LSP) or later in the /on_update call. Q. What is tracking
    url? A. A tracking URL can be provided in the /on_track call for P2H2P type shipment
    to allow tracking of the order. For P2P shipments, real-time updates must be shared
    using tracking.gps to enable live tracking of the shipment. Q. If return to origin
    is sent as no, So in such case what will happen? A. If "Return to Origin" is set
    to "no" and the order cannot be delivered to the end user—either due to refusal
    or any other reason—the item will be disposed of instead of being returned. Q.
    Is there any extra charge for RTO delivery? A. Yes, there is an additional charge
    for RTO (Return to Origin) delivery, which will be shared by the LSP in the /on_search
    call. If the item is cancelled and needs to be returned, this charge will later
    be included in the quote.breakup array in the /on_cancel call. Q. On_status call
    can be unsolicited or it can be only solicited? A. The /on_status call can be
    either solicited or unsolicited. If the buyer initiates a /status request, the
    LSP responds with a solicited /on_status call. However, in most cases, the LSP
    proactively sends unsolicited /on_status updates whenever there is a change in
    the fulfillment state — for example, when the order reaches the destination hub,
    is out for delivery, or has been delivered. Q. What is the provider array in the
    search call? A. The provider array in the /on_search response contains all the
    details shared by the LSP. This includes the provider''s descriptor (such as name
    and short description), fulfillment details for both forward and RTO shipments,
    the categories they serve, and the estimated delivery timelines. All of this information
    is included within the provider object. Q. Where is the new logistic api contract
    v1.2.5? A. Find below the new API contract for logistic domain v1.2.5 Link:- Q.
    If an item is out of stock, which call should be used to notify the seller with
    the latest item and packaging dimensions for delivery? A. If an item is out of
    stock, damaged, or cannot be delivered for any reason, the LBNP can send an /update
    call to inform the LSP with the updated item details, including its dimensions
    or packaging information. In response, the LSP may update the quote price if there
    are any changes in the item details or if the delivery charges need to be adjusted
    based on the new package dimensions. Q. Where is the new logistic api contract
    v1.2.0? A. Find below the new API contract for logistic domain v1.2.0 Link:- Q.On
    which call tracking can be enabled and disabled? A.The tracking status tag—either
    "enabled" or "disabled"—will be provided by the LSP in the /on_confirm call. This
    informs the LBNP whether tracking is available for the shipment or not.'
  tags:
  - Logistics Related Queries
- question: Is it possible to have only cascaded logistics flow with retail?
  answer: Both cascaded and uncascaded logistics flows are possible. In a typical
    cascaded flow, a retail buyer selects items in the cart, and the Logistics Buyer
    (LBNP) searches for a logistics service provider (LSP) to fulfill the order. It
    receives multiple catalogs and initiates the logistics order with one of the LSPs.
    After the buyer confirms the order, LBNP confirms the logistics order. However,
    there is a possibility that the chosen LSP may delay pickup or cancel the order
    after confirmation. In such cases, LBNP can cancel the logistics order, cascading
    it back so that the seller can cancel the retail order. Alternatively, LBNP can
    search for another LSP and confirm the order with them. Non cascaded flow is independent
    logistics flow. Where an independent logistics buyer wants to buy logistics, and
    it should be implemented as per contract api calls.
  tags:
  - Logistics Related Queries
- question: When to call /init in logistics?
  answer: It is called when a Retail buyer makes an init call then a logistic buyer
    LBNP initiates a /init to logistic service provider (LSP). /on_status
  tags:
  - Logistics Related Queries
- question: Do multiple on_status responses share the same message ID?
  answer: "No, all unsolicited on_status responses will have a unique message ID.\
    \ Q. Is there any log verification utility for the logistic domain? A. Yes there\
    \ is a log verification utility for the logistic domain, NP can follow the link\
    \ below to clone the repository and can use the utility for payload check.\n\n\
    Link:- \n\nSteps to use utility:- Clone the repository on your local machine and\
    \ then run the script “npm i” to install all the packages. Create a public/logs\
    \ folder inside logistics-b2b/log-verification-utility/public/logs Put all the\
    \ flow json files inside the public/logs folder. Go to the directory logistics-b2b/log-verification-utility\
    \ Run the script in the terminal “node index logistics” A log_report.json file\
    \ will be created automatically inside the public/logs folder where NP can find\
    \ the issue in their payload or flows."
  tags:
  - FIS Related Queries
- question: Where can I find resources like test scenarios, log validation utilities,
    sandbox environments, and mock servers for ONDC integration?
  answer: 'ONDC provides a variety of resources to help participants streamline their
    integration and testing processes. These include: Test Scenarios – Refer to LogSubmission-UI
    in the developer guide. – Used to validate request/response logs for various domains.
    Sandbox Environment –Refer to Sandbox-UI in the developer guide Mock Servers /
    Reference Applications – Sample apps for buyer/seller roles to assist in integration
    and QA. You can access these tools and resources from the .'
  tags:
  - FIS Related Queries
- question: 'What are the possible fee types for BuyerApp fees?

    A: Supported types are:'
  answer: 'amount: fixed INR fee percent: percentage of loan amount percent-annualized:
    annualized percentage for a 12-month tenure'
  tags:
  - Buyer App Fee Configuration
- question: 'What is the purpose of AccountAggregatorID in customer information?

    A: AccountAggregatorID facilitates integration with an Account Aggregator when
    the customer lacks an AAID.'
  answer: 'XInput: Buyer-Seller Form Interaction FAQ'
  tags:
  - Contract and Payment Flow
- question: 'What are the key fields in the head section of XInput?

    A:'
  answer: 'name: Descriptive name of the form.

    index: Includes min, cur (current), and max values to track form progression.

    headings: List of form section headings.'
  tags:
  - Contract and Payment Flow
- question: 'What is form_response in XInput and when is it used?

    A:Form_response captures the outcome of a form submission:'
  answer: 'json { "form_response": { "status": "SUCCESS", "submission_id": "F03_SUBMISSION_ID"
    } } status: Indicates the form status (e.g., SUCCESS, PENDING, APPROVED, REJECTED).

    submission_id: Unique identifier for the submission.'
  tags:
  - CopyEdit
- question: What are the supported mime_type values in XInput?
  answer: 'text/html:

    The buyer renders a form in HTML structure.

    The form includes fields with name attributes, which become the keys in the submission
    payload.

    Read-only fields must be shown as non-editable.


    application/html:

    The seller provides a link to an external HTML page where the buyer fills out
    and submits the form.'
  tags:
  - CopyEdit
- question: 'What happens after submitting a text/html form?

    A:

    If successful, the buyer receives a submission_id in response.

    In case of an error, a NACK response with an error code/message is returned.

    Example success response:'
  answer: 'json { "submission_id": "f5a9f4fe-fc3a-4432-aa2d-d397724a5061" } Example
    error response: json { "message": { "ack": { "status": "NACK" } }, "error": {
    "code": "07", "message": "Data sent in request is not correct" } } Note: Use Content-Type:
    multipart/form-data in headers for text/html submissions.'
  tags:
  - CopyEdit
- question: 'What does a sample on_status or status response look like?

    A:'
  answer: 'json { "xinput": { "form_response": { "status": "APPROVED", "submission_id":
    "<Submission_ID>" } } } /search and on_search'
  tags:
  - API Flow and Sequence
- question: "What does message.intent.payment.collected_by mean?\n A: It defines who\
    \ collects the payment."
  answer: "If set to bap: the Buyer App collects the payment and settles with the\
    \ Seller App. If set to bpp: the Seller App collects the payment directly.\n This\
    \ affects whether a payment link is sent or not during the /on_confirm phase."
  tags:
  - API Flow and Sequence
- question: "What do message.catalog.providers.categories.descriptor.code and name\
    \ mean?\n A:"
  answer: code (e.g., "PERSONAL_LOAN") is a machine-readable identifier for the loan
    type. name (e.g., "Personal Loan") is a human-readable label shown in UI or response
    listings.
  tags:
  - API Flow and Sequence
- question: "What is the use of short_desc and long_desc in items.descriptor?\n A:"
  answer: short_desc is used in compact UI elements (e.g., "ICICI Bank Ltd"). long_desc
    provides a more descriptive version, such as "ICICI Bank Ltd, India", for expanded
    views.
  tags:
  - API Flow and Sequence
- question: "What does xinput.head.descriptor.name mean?\n A: It is the title of the\
    \ data collection section, e.g., \"Customer Information\", which helps group the\
    \ form inputs meaningfully."
  answer: /select and on_select
  tags:
  - API Flow and Sequence
- question: "Can the borrower change the loan tenure?\n A:Yes, the borrower can modify\
    \ the loan tenure using a dedicated form shared by the lender. After submitting\
    \ the form, a new /select call is made with the form submission ID in the xinput."
  answer: /init and on_init
  tags:
  - API Flow and Sequence
- question: How do multiple /init and /on_init calls work?
  answer: '/init: The borrower fills out forms for KYC, bank details, and e-mandate
    to initiate the loan request. /on_init: The lender accepts the submitted details,
    returns the loan status, and may provide additional terms or request an e-mandate
    form.'
  tags:
  - API Flow and Sequence
- question: "Whose bank account number is shared under message.order.payments.params.bank_account_number?\n\
    \ A:This field refers to the bank account number of the BAP (Buyer App)."
  answer: /confirm and on_confirm
  tags:
  - API Flow and Sequence
- question: Why are there multiple calls for search and on_search?
  answer: 'Search: Explore available invoice based loan options by conducting search
    over the network. on_search: The lender platform provides a comprehensive catalog
    of various loan types including invoice based loans. Form: On the above on_search
    in xinput lender platform sends the form for Invoice based loan to get all the
    relevant details like UDYAM, contact, GSTIN profile, GSTR1, GSTRA2, and GSTR3B.
    Note: JSON format to upload the docs as part of form submission Search: Find suitable
    invoice based loan services, here you will also provide the submission id for
    the previous form. on_search: The lender platform provides a comprehensive catalog
    of various loan types including invoice based loans also the lender platform generates
    a consent request for capturing the borrower''s consent. search: Find suitable
    invoice based loan services. on_search: The lender platform provides a comprehensive
    catalog of various loan types including invoice based loans.'
  tags:
  - API Flow and Sequence
- question: Is there a specified duration for the offer's validity?
  answer: Yes, the offer includes a defined expiry time, which is specified in the
    quote.ttl .
  tags:
  - API Flow and Sequence
- question: What is quote.id on on_select?
  answer: Here quote.id is lead id or loan_id which is created at lenders end whenever
    they receive user information based on the offer they have generated further lender
    create lead id at their system that is further mapped to loan id.
  tags:
  - API Flow and Sequence
- question: In /on_confirm API, what are different codes for message/order/fulfillments/state/descriptor?
  answer: 'It refers to portraying the present status of order fulfillments. It encapsulates
    the real time information on the progress and completion status of the fulfillment
    process. INITIATED: When loan gets initiated by lender SANCTIONED:  Loan sanction
    is the approval of the loan by lender DISBURSED: When the lender delivers the
    amount to the borrower after verification and approval PENDING: When the loan
    is in pending state REJECTED: When the loan request gets rejected by lender due
    to some reason COMPLETED: When the overall process for loan gets over'
  tags:
  - API Flow and Sequence
- question: What are the credit loans present in ONDC?
  answer: Types of Credit Loans Available in ONDC Purchase Finance – A short-term
    loan provided to buyers to finance the purchase of goods or services on ONDC.
    It helps businesses and individuals complete transactions without immediate full
    payment. Working Capital Loan – A loan designed to cover daily operational expenses
    such as inventory, salaries, and rent. It helps businesses manage cash flow fluctuations
    and maintain smooth operations. Personal Loan – An unsecured loan that individuals
    can use for various personal financial needs, such as purchasing products, travel,
    or emergencies, within the ONDC ecosystem. Invoice Loan – A loan provided against
    unpaid invoices, allowing sellers to access funds before their customers make
    payments. It helps businesses maintain liquidity while waiting for receivables.
    Q. Which testing tools are used for FIS flow testing? You can utilize Pramaan,
    an automation tool designed for testing and validating the FIS flow within the
    ONDC ecosystem also there are reference apps available. Q. Is RSF mandatory for
    submission of the FIS flow? No, it is not required.
  tags:
  - Submission of Logs
- question: "Where should I place my log files?\n A: Place them in a folder named\
    \ after your entity, under the domain folder for credit:"
  answer: 'php-template FIS12/<your-entity-name>/ Example: bash FIS12/icici-bank/'
  tags:
  - CopyEdit
- question: "What naming convention should I follow for API logs?\n A:\n For single\
    \ calls, use:"
  answer: search.json on_search.json select.json (if only one call)
  tags:
  - File Naming & Structure
- question: "How should I name files if there are multiple API calls for the same\
    \ endpoint?\n A: Use numeric suffixes to differentiate sequential calls. Examples:"
  answer: 'First select: select_1.json Second select: select_2.json First init: init_1.json
    Second init: init_2.json This helps reviewers track the call sequence and match
    it with test scenarios.'
  tags:
  - File Naming & Structure
- question: Is there any automation tool I can use to test out my seller or buyer
    app?
  answer: 'Pramaan is your complete toolkit that validates your applications through
    automated checks and simulated scenarios

    Pramaan makes testing seamless and hassle-free. Follow these simple steps to get
    started:'
  tags:
  - Reference Applications
- question: "Why are reference applications important?\n A: They enable:"
  answer: Independent and end-to-end testing of APIs and services
  tags:
  - Scalability and security testin
- question: "What environments are available for testing?\n A: Testing is supported\
    \ in:"
  answer: Pre-Production Each use case may have different URLs and onboarding instructions.
  tags:
  - Staging
- question: "How can I access the Buyer App for Personal Loan testing?\n A: Use this\
    \ URL: Send an email to dev@cliniq360.com to request login credentials."
  answer: 'Here''s a comprehensive FAQ section based on the Reference Applications
    overview, key features, and environment access details for ONDC Financial Services
    (FIS) testing across different use cases. Use Case Mapping (Quick Reference) Reconciliation
    and Settlement Framework (RSF) Q. Could you please provide the RSF documentation?.

    A: You can refer to these documents to implement the RSF. Developer Docs: RSF
    Explainer: RSF PRD: FAQS: MOCK SERVER GUIDELINE:'
  tags:
  - Staging
- question: 'What is the transaction flow in RSF ?

    A: The image outlines the detailed transaction flow for Reconciliation and Settlement
    in a three-party setup: Collector, Settlement Agency, and Receiver. Here''s a
    brief explanation:'
  answer: '1. Settlement Phase:

    Collector & Receiver: Collector and Receiver both send the /settle call to the
    settlement  agency. Settlement Agency: Receives settlement instructions from both
    Collector and Receiver. Compare them to check for matching orders and amounts.
    If matched: proceeds to settlement. If mismatched: Share /on_settle with the status
    NOT_SETTLED with Collector & Receiver. 2. Mismatch Reconciliation Among NPs: This
    part deals with resolving mismatches between participants. Mismatch Process: Reconciliation
    /recon sent to counterparty. If mismatch is found: Counterparty reviews and responds
    with on_recon diff_amount flag. ​​'
  tags:
  - Staging
- question: Could you offer detailed information about the field's inter_participant
    amount, provider amount, and self amount in the /settle API?
  answer: Self amount is the amount that is to be moved to the API caller's operative
    account Provider amount is the amount that is to be transferred to the provider's
    provided account
  tags:
  - Collector amount is what collector keeps for themselves
- question: Is the settlement process expected to be carried out on a daily basis,
    or does it depend on the mutual decision of the buyer and seller (as both need
    to send /settle to S.A)?
  answer: Settlement takes as agreed between the buyer app (collector) and seller
    app (receiver) viz. agreed through the settlement_window and settlement_basis
    attribute. The settlement cycle shall run once every day in the initial phase.
    Buyer Applications (Collector) are strongly suggested to send a daily /settle
    call, even if there are null settlements for the day to ensure deductions don’t
    happen based on the settlement call of the Seller Application (Receiver). In cases,
    Seller Applications (Receiver) sends a settle call for which there is no Call
    from the Buyer Application (Collector), money will get debited from the Collector.
  tags:
  - Collector amount is what collector keeps for themselves
- question: Could you please provide the details of the id field in the settlement
    object? Is this id will be the same for both the collector and receiver? Who is
    responsible for generating this id, and is it related to any payment ID?
  answer: '"settlement": { "type": "NP-NP", "id": "settlement-id-abc" } } settlement_id
    is the identifier of the settlement instruction shared by the respective NP. This
    is independent of the payment/ fund settlement or the counterparty NP. It is an
    identifier for the NP for themselves to identify respective settlement instructions
    at their end.'
  tags:
  - Collector amount is what collector keeps for themselves
- question: Is there an offline settlement process in RSF 2.0?
  answer: No, the settlement of funds takes place through the settlement agency
  tags:
  - Collector amount is what collector keeps for themselves
- question: Is there any utility available for testing the RSF 2.0 flow?
  answer: Yes, details available in the ONDC Official GitHub page
  tags:
  - Collector amount is what collector keeps for themselves
- question: Integration with settlement agencies is required for both receiver and
    collector?
  answer: 'Yes'
  tags:
  - Collector amount is what collector keeps for themselves
- question: Is the provider amount optional?
  answer: Sharing provider amount is optional. In case seller app 'Opts in' for direct
    provider settlement, only then the provider amount is shared by the seller app.
  tags:
  - Collector amount is what collector keeps for themselves
- question: What is the collector amount ?
  answer: collector amount is essentially the amount kept by the collector of payment
    of the order. In retail context where retail buyer app is the collector, collector
    amount would refer to the buyer app’s finder fees commission
  tags:
  - Collector amount is what collector keeps for themselves
- question: What is self.amount?
  answer: Depending on who is calling the API - For buyer app's recon - self would
    be BFF - For seller app's recon - In case of SOR settlement, self would be seller
    app's margin. In the case of an entire settlement to SNP, self would be an inter
    NP amount.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What are the settlement instructions for the buyer and seller apps in
    a transaction where both apps have applicable commissions?
  answer: 'For a retail order of 1050 Rupees collected by the retail buyer app, where
    the buyer app’s applicable commission is 50 Rupees, the retail seller app’s applicable
    commission is 200 Rupees, the respective settle payloads would be: Buyer app’s
    settlement instruction (collector''s /settle) inter participant - 1000 collector
    - 50 self - 50 Seller app’s settlement instruction (receiver''s /settle) inter
    participant - 1000 collector - 50 self - 200 provider - 800'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Settlement in settlements array of order in /recon - /on_recon APIs, what
    does payment_id, amount, commission (is this buyer app finder fee, seller app
    finder fee, withholding amount) signify?
  answer: Settlements in the long term context, could be split into multiple phases
    (example 50% at the time of delivery and 50% at the time of return window expiry)
    hence provided as an array. Therefore the settlement object is an array, which
    may comprise one or as many settlement objects as required. Order amount signifies
    the total order value. payment_id the payment transaction id as per the domain
    transaction, refer params object
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: How will we know the tds and tcs value?
  answer: TCS/ TDS is dependent on the transaction context, whether it is applicable
    and if so how much. Check the tax guidelines shared. Settle instructions only
    provide the money to be moved from collector to receiver. Calculations and reconciliation
    among NPs are to be taken up in recon/ on_recon
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Where can we use the TO_BE_INITIATED status in settlement?
  answer: recon / on_recon APIs are to be leveraged for reconciling orders among NPs
    irrespective of whether an order’s settlement amount has been settled or not.
    In case, the recon API is called for an order before the settlement has taken
    place, the status for the same would be TO_BE_INITIATED.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: For the "settle" call do we need to pass the list of orders for which
    the settlement window has expired or the orders whose settlement is yet to expire?
  answer: The orders for which the settlement is due is what is needed to be shared
    in the /settle call.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Is the settlement_window field mandatory in the "on_confirm" call? If
    it is not required, what would be the recommended default value to filter orders
    to be settled in the RSF "/settle" call?
  answer: Please refer to the API contract/ developer guide for the respective domain/
    use case. The recommended value would vary for respective domains.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Now, if the case is for settling withholding amounts after the return
    window is expired, if the order item is non returnable, will there be any case
    of withholding amount settlement involved?
  answer: There may be cases where a refund etc. may be required through the IGM route.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: There can be multiple orders sent in /on_settle, among which some are
    correctly settled while others are not settled. In such cases, should we partially
    ACK the /on_settle in for the correctly settled orders or NACK the entire /on_settle?
  answer: Ack or Nack are dependent on schema validations primarily and it is not
    partial. It is either Ack for all or Nack for all orders.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Can you point us to the documentation for payloads of ACK and NACK?
  answer: Available in Swagger UI - It is the same for all APIs across ONDC network
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: How many APIs do I need to develop to become RSF 2.0 compliant?
  answer: 'There are 6 APIs for development: /Settle, /On_Settle, /Report, /on_Report,
    /Recon, /On_Recon.'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What is the use of /Settle, /On_Settle APIs?
  answer: '/Settle: The Network Participants (Collector and Receiver) send settlement
    instructions to the Settlement Agency, specifying the order ID and the corresponding
    order amount. /On_Settle: The Settlement Agency responds to the bap_uri/on_settle
    with a status of either SETTLED or NOT_SETTLED, indicating whether the settlement
    was successful.'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What is the use of /Report, /On_Report APIs?
  answer: Report APIs can be used by the Collector or Receiver to know about the status
    of a settlement call from the Settlement Agency. The situation can arise due to
    edge case scenarios where the participant does not receive a /On_Settle call from
    the SA and therefore wants to know of the Settle Status. The caller of the API
    can mention the reference Transaction id and Reference Message id in the /Report
    call and Settlement Agency will share details on /On_Report API
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What is the use of /Recon, /On_Recon APIs?
  answer: "The reconciliation process among the NPs are facilitated through the recon\
    \ and on_recon APIs. In case settlement instructions are shared to the settlement\
    \ agency and it fails for certain orders due an order mismatch or an order amount\
    \ mismatch, NPs shall leverage the recon and on_recon API to communicate the mismatches.\
    \ /recon:- In case an NP receives an order amount mismatch error code from the\
    \ settlement agency, the receiver initiates the /recon request to the collector\
    \ providing the breakup details for the respective order ID(s). \n/on_recon:-\
    \ The collector then reconciles and responds with the on_recon including the difference\
    \ amount after getting the recon call. In case an NP receives an order id mismatch\
    \ error code (i.e. order ID not shared by the counterparty), the NP is expected\
    \ to call the /recon API of the respective counterparty with the specific order\
    \ ID(s) and its breakup details. The counterparty then reconciles and responds\
    \ with details specific to the order id requested. In both cases, if the response\
    \ is correctly reconciled for the requisite orders, the settlement is initiated\
    \ in the next settlement cycle. Otherwise, NPs are expected to raise an IGM for\
    \ resolving the differences."
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What are the Steps needed for my application to be RSF 2.0 Compliant?
  answer: 'RSF 2.0 compliance involves 4 major steps – 1. NOCA bank account opening
    (Refer to Ques 26. for NOCA opening applicability) 2. Registration process including
    agreement signing with NBBL 3. API Development (6 in Number) – Settle, On_Settle,
    Report, On_Report, Recon, On_Recon 4. Testing: Settle, On_Settle, Report, On_Report
    with NBBL’s Pre-prod environment. Recon, On_Recon with ONDC’s Mock Server or another
    NP'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What is the testing needed for my application once I have developed the
    RSF 2.0 APIs?
  answer: Settle, On_Settle, Report, On_Report with NIBBLes Pre-prod environment.
    Recon, On_Recon with ONDC’s Mock Server or another NP
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What is the “MISC” settlement call? When should I be using the same?
  answer: 'MISC settlement (under Settle Call) is used for settling pre-funded money
    from an NP’s NOCA (non operative current account) to their operative account.
    Misc Settlement call can also be used by an MSN Seller Network participant to
    transfer money from its NOCA account to its Seller’s Operative Current Account
    as per their terms of trade. All inter NP order level settlements need to mandatorily
    use Settle Type: “Inter-NP”'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: I am a seller and there are unsettled orders with a buyer application.
    What should be my next steps to initiate reconciliation?
  answer: 'Steps to be followed are as follows: 1) Seller Application need to initiate
    recon API call to the respective buyer app(s) highlighting order level details
    including Order details such as Amount, Commission, With-holding amount, TDS and
    TCS 2) Buyer application needs to respond back with “on_recon” to either convey
    their agreement to seller application’s workings or reject the same a) If the
    “recon_accord” flag is true: Buyer Application agrees to the calculations of Seller
    application as per Recon API and requests the seller application to send a /settle
    call basis the same on the “Settlement Date” mentioned in the call. b) If the
    “recon_accord” flag is false: : Buyer Application disagrees with the calculations
    of Seller application as per Recon API and would send the order level calculations
    along with “diff_Value” wherever applicable. 3) Seller application basis the calculations
    can re-initiate the recon call, with the updated values if applicable and Step
    2 would restart. The Recon flow ultimately positively closes with Buyer Application
    (Collector) responding with “Recon_Accord” = True and provide settlement date
    Both Parties can at any stage raise an IGM complaint for resolution in case the
    recon, on_recon flow doesn’t provide a satisfactory resolution. Please find the
    pictorial representation of handling unsettled order .'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Can RECON API be initiated by both Collector and Receiver ?
  answer: Yes, it can be initiated by both. Suggestion is for the receiver to initiate
    the flow
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: In RECON payload there is Commission field , what it is and how it works
    for Collector and Receiver ?
  answer: Commission refers to the commission between the NPs for the transaction
    executed among them. Illustratively buyer app's commission on the transaction/
    order.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: In ON_RECON payload, there is a field diff_value. How can it act as a
    negative difference ?
  answer: It will only have a positive value. The other field for the respective amount
    (value attribute) is to be leveraged to see whether it is positive difference
    or negative difference.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: How to initiate an IGM request for a settlement case. Specifically, how
    will the IGM issue reference the settlement related to this request, and which
    settlement would it be referring to?
  answer: For settlement issues in case there are amount mismatches among the NPs
    (as per the RSF 2.0 framework) or settlement has not been initiated for certain
    orders, the reference of the order id shall be taken along with a specific issue.subcategory,
    illustratively - underpaid, overpaid, not-paid, as the case may be.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: What if the NP has completed testing with the mock server, can they submit
    the mock server logs ?
  answer: 'Yes'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: We have observed the following parameters in on_confirm. Could you please
    provide more information on these parameters?
  answer: '"@ondc/org/settlement_basis":"delivery", "@ondc/org/settlement_window":"P1D",
    "@ondc/org/withholding_amount":"10.00

    A settlement basis is the event based on which the settlement is to be initiated
    at the time of settlement window. So, delivery as the settlement basis and 3 as
    the settlement window would mean the settlement instruction has to be sent on
    the 3rd day from the delivery date.'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: For RSF API implementation, is it necessary to also subscribe to the "ONDC:NTS10"
    domain?
  answer: No subscription is needed for ONDC:NTS10
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: I am seeking clarification on the settlement process in scenarios where.
  answer: The seller-side order is partially canceled. The buyer-side order is fully
    canceled. As a seller app, we need to understand how settlement and reconciliation
    are handled in these cases. Could you please provide guidance on this process?
    Typically, settlement of the order for now takes place after a terminal state
    in the retail domains, for example return window plus 7 days. Whether the order
    is seller side or buyer side cancelled is immaterial given fund movement will
    take place post a terminal state. For a completely cancelled order, if there are
    no cancellation charges, no settlement needs to be done For a partially cancelled
    order, the fund needs to be settled based on the remaining portion of the order
    quote.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Is the transaction id the same in the report call?
  answer: Yes, the transaction id is the same in the report call for testing with
    a mock server. For real cases, this is up to the implementation of the NP. Refer
    notes provided in the instructions document for leveraging the mock server for
    testing purposes.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Is the transaction id the same in the recon call?
  answer: Same as above
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: The bap_id, bap_uri in /recon should be of the party triggering the /recon
    and the bpp_id, bpp_uri should be of the counter party receiving the /recon. Is
    this correct?
  answer: No, the bap_id (buyer app id) and bpp_id (seller app id) should be the same
    for the /recon as per the core transaction itself, irrespective of which NP calls
    the recon API. This also works the same way for testing the recon flow in the
    mock server as well.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: Can we use either bap/bpp id or bap/bpp uri as the collector/receiver
    app id?
  answer: The settle call’s collector/receiver app id is as per the collector and
    receiver pair for the order being executed among the NPs.
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: 'Please explain the /recon calculations?

    A:'
  answer: orders.amount = Total order amount settlements.amount = Amount to be settled
    from buyer app to seller app (collector to receiver) settlements.commision = Buyer
    app’s commission settlements.withholding_amount = Not applicable currently settlements.tds
    = Calculated on order.amount or settlements.amount (check with legal/finance teams)
    settlements.tcs = Calculated on order.amount or settlements.amount (check with
    legal/finance)
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: How does /on_recon help in fixing amounts in /settle?
  answer: 'orders.amount = Total order amount settlements.amount = Not always BFF
    (Depends on collector and receiver pair) settlements.commision = Always buyer
    app’s commission If /on_recon has recon_accord: true, NPs will trigger /settle.
    However: When the seller collects payment, /settle includes: Inter-participant
    amount = Amount settled from collector to receiver Collector amount = What collector
    keeps for themselves Self amount = Amount moved to API caller’s operative account
    Provider amount = Amount transferred to an end provider’s account Refer to Section
    3.4 in the use case documentation for detailed examples.'
  tags:
  - Self is the amount to be moved to the current account of the entity calling the
    API
- question: 'What does message.orders.amount refer to in the /recon payload, and why
    is message.orders.settlements an array? Also, should we include all previous unsuccessful
    settlement attempts for the order?

    A: The message.orders.amount.value field represents the full cost of an order,
    while settlements ensure the correct transfer of funds after accounting for deductions.'
  answer: If an order involves multiple payments, multiple settlement records can
    be sent, each linked to a corresponding payment_id.
  tags:
  - Settlement Agency Onboarding
- question: In the "settle" call of the Settlement Agency, how are taxes handled—does
    the collector deduct them before sending the "inter_participant" value, or is
    it inclusive, requiring sellers to handle deductions?
  answer: The calculations are outside of the /settle call, the amount that needs
    to be sent from the collector to the receiver is provided as in the inter_participant
    amount and whatever is held by the collector is sent as part of the collector
    amount. Self is where the respective NP provides the amount to be transferred
    to their own operative account.
  tags:
  - Settlement Agency Onboarding
- question: Are there unsolicited calls for reports or status updates?
  answer: No there are no unsolicited calls from the settlement agency
  tags:
  - Settlement Agency Onboarding
- question: Do we need to include bank_details of both collector (debit from account)
    and receiver (credit to account) where to add both in /settle API, as the current
    payload only specifies adding the provider bank details?
  answer: The bank account information of NPs will be provided to the settlement agency
    directly at the time of the settlement agency’s onboarding journey. This flow
    will be communicated subsequently very soon. NPs may reach out to the settlement
    agency’s POC for further details.
  tags:
  - Settlement Agency Onboarding
- question: The documentation indicates that as a seller app, we need to call the
    /settle endpoint of the Settlement Agency to initiate the RSF settlement flow.
    Is there a predefined cycle for calling this method (e.g., every 7 days), or is
    this something we need to configure manually?
  answer: The settlement cycle runs everyday. The /settle instruction needs to be
    shared with the settlement agency, by both buyer app and seller app, based on
    the settlement cycle agreed for the transaction (refer settlement_window and settlement_basis
    attributes). Buyer Applications (Collector) are strongly suggested to send a daily
    /settle call, even if there are null settlements for the day to ensure deductions
    don't happen based on the settlement call of the Seller Application (Receiver).
  tags:
  - Settlement Agency Onboarding
- question: Who needs to open a NOCA (Non-Operative Current Account)?
  answer: 'Non-Operative Current Account has to be mandatorily opened by: 1. Network
    participant who are collector of Money and need to settle to a counter 2. MSN
    Seller Network Participants who are opting in for direct Settlement to its providers
    (sellers) while registering with NBBL (Settlement Agency)'
  tags:
  - Participant on the Network
- question: Can I (a network participant) access my NOCA account for withdrawal of
    money?
  answer: Money withdrawal from NOCA is only allowed by the instructions of the Settlement
    Agency. It is therefore mandated for every participant opening a NOCA account
    to also open an OCA account where “Self” money can be parked via instructions
    from the Settlement Agency. It is also therefore advised for participants to not
    link their NOCA account to their PA/PG till RSF 2.0 APIs are developed and tested
    by NBBL.
  tags:
  - Participant on the Network
- question: Which Banks are compliant with opening a NOCA account?
  answer: 'You can access the list of banks on the ONDC website. The link is here:
    .'
  tags:
  - Participant on the Network
- question: Should I have my NOCA and OCA account with the same Bank?
  answer: Each Network participant opening a NOCA account need to also have an Operative
    Current Account (OCA). They may or may not choose to have it in the same Bank.
  tags:
  - Participant on the Network
- question: I am an MSN Seller NP and have opted in for settling to my sellers via
    RSF 2.0, how would the money flow happen?
  answer: 'As an MSN Seller NP you need to mandatorily open a NOCA account with a
    bank supporting the same. Assuming the Buyer Application is the collector of money
    from the buyer, the settlement money flows from Buyer Applications NOCA account
    to your (Seller Application’s NOCA account) and the seller share moves from your
    NOCA to the sellers account mentioned in the Settle call sent to the Settlement
    Agency. Your share (Seller Application’s) moves from your NOCA to your Operative
    Current Account (OCA) as instructed to the SA:'
  tags:
  - Participant on the Network
- question: 'We have completed the RSF 2.0 processes and our logs have been approved
    by ONDC. Could you kindly let us know what the next steps are in the process?

    A: Onboarding with Settlement Agency – NBBL has two steps – (can be performed
    simultaneously)'
  answer: 'For agreement, it shall have two copies – a) Primary Copy on INR 1500 Stamp
    Paper ( to be retained by NBBL ) and b) counter copy to be retained by the NP
    on INR 500 Stamp Paper. It should be signed in wet ink.  Once the agreement is
    ready at your end kindly let know, we will share the coordinates to send the agreement.


    Please ensure the following are the documents to be shared as a part of onboarding.

    List of Document - Agreement – NP <> SA  (Attached) GST (soft copy) PAN (soft
    copy) NP Account Details (Soft Copy of Offer letter issued by Bank) Operative
    (or Current) Account Details (Cancelled Cheque containing legal name of entity)
    For #6, folks from NBBL, the settlement agency, - @ / @ will share the details
    and this shall be a part of technical onboarding.'
  tags:
  - Board resolution for authorized signatory details
- question: In Flow 2, after "on_recon", if "recon_accord" is "true", when we reinitiate
    the settle request to the RSF Mock Server, do we need to send the settle request
    with the same transaction_id as the one used in Flow 2?.
  answer: If we do, we are not receiving the expected responses in the RSF Mock Server.
    Instead, a new RSF Server session is created. Could you please clarify whether
    the reinitiation of the /settle flow will be carried out in the new RSF Mock Server
    session with a new transaction_id?. you need to send the /settle request with
    a different transaction_id.
  tags:
  - Log Verification And Testing
- question: Is the transaction id the same in the report call for the mock server?
  answer: Yes, the transaction id is the same in the report call for testing with
    a mock server. For real cases, this is up to the implementation of the NP. Refer
    notes provided in the instructions document for leveraging the mock server for
    testing purposes.
  tags:
  - Log Verification And Testing
- question: Do we have RSF flow in reference buyer apps?
  answer: No, we don't have the RSF flows built for the reference buyer app. For API
    testing, you may leverage the mock server (available ), but testing with another
    NP should be done to make sure implementation is appropriately handled.
  tags:
  - Log Verification And Testing
- question: As per the doc, we (receiver) need to respond on_recon immediately (solicited)
    with recon_accord status, BUT this is not possible. there may be a case when we
    need to review a request and provide on_recon as an unsolicited response later.
    So is this possible right now?
  answer: TTL for on_recon provided in the examples are only placeholders. It would
    typically be around 5-7 days.
  tags:
  - Refund Flow After Settlement
- question: How does the settlement process for the refund scenario occur in RSF 2.0?
  answer: In the RSF 2.0 (Revised Settlement Framework), how a refund is handled depends
    on whether the seller has already received the payment when the refund is requested.
    Let’s say a customer receives a damaged product and asks for a refund after the
    order has been delivered. If the settlement rule was based on “Order Delivered”
    and the seller was supposed to be paid within two days of delivery, then by the
    time the refund is requested, the seller might have already received the money.
    In this case, since the settlement window is closed and the seller has been paid,
    the refund process needs to follow a different path. The system has to manage
    the refund carefully and may even involve recovering the amount from the seller,
    depending on the situation. To understand exactly how this works—including the
    steps involved, which parties do what, and how the APIs support this process—you
    can refer to the    documentation.
  tags:
  - IGM Related Queries
- question: How can I test IGM 2.0.0 as a buyer or seller?
  answer: 'To test IGM 2.0.0, you have two options: Connect with a Network Participant:
    Collaborate with an existing Network Participant who has already implemented IGM
    2.0.0 for testing. Use Mock Server: The mock server supports both buyer side and
    seller side testing for all flows. For guidance on using the mock server, refer
    to the. Use Pramaan: Pramaan supports both buyer and seller testing for flows,
    available .'
  tags:
  - IGM Related Queries
- question: How many flows are present in IGM 2.0.0?
  answer: 'There are three flows in IGM 2.0.0 developer guide that cover the use cases:
    Illustrative Flow 1 (Buyer raises a complaint related to an item category) Illustrative
    Flow 2 (Seller raises a complaint regarding a policy issue) Illustrative Flow
    3 (Buyer raises a complaint related to the fulfillment category) Illustrative
    Flow 4 (Buyer raises a complaint related to the multiple items) Illustrative Flow
    5 (TRV) (Buyer raises a complaint related to an item category)'
  tags:
  - IGM Related Queries
- question: What are refs in IGM 2.0.0, and which refs are mandatory in Flow 1?
  answer: Refs in IGM 2.0.0 are used to reference order details such as order, provider,
    fulfillment, item, etc., along with their respective IDs. These references help
    identify the order, provider, and item related to an issue. Mandatory Refs depend
    on the category of the complaint. Item category complaints required item object
    and fulfilment category complaints required fulfilment object.
  tags:
  - IGM Related Queries
- question: What are actors in IGM 2.0.0? What roles do INTERFACING_NP and COUNTERPARTY_NP
    play?
  answer: 'Actors in IGM 2.0.0 are participants involved in managing an issue, such
    as INTERFACING_NP and COUNTERPARTY_NP: INTERFACING_NP: Responsible for creating
    the complaint (for example buyer app) COUNTERPARTY_NP: Responsible for resolving
    the complaint (for example seller app)'
  tags:
  - IGM Related Queries
- question: What are actions in IGM 2.0.0?
  answer: Actions in IGM 2.0.0 represent how actors take actions/ communicate after
    a complaint is raised. These actions are defined using multiple enums, which indicate
    the specific actions taken by each actor during the complaint resolution process.
  tags:
  - IGM Related Queries
- question: What is the meaning of the update_target field in the message object?
  answer: The update_target field indicates the exact path within the issue object
    that has been modified and also specifies the type of update (e.g., APPENDED,
    UPDATED).
  tags:
  - IGM Related Queries
- question: What does the last_action_id field signify in the issue object?
  answer: The last_action_id field refers to the unique identifier of the most recent
    action taken on the issue, helping systems trace the current status of the complaint.
  tags:
  - IGM Related Queries
- question: Why is the status field in the issue object important?
  answer: The status field captures the current lifecycle stage of the issue, such
    as OPEN, PROCESSING, RESOLVED, or CLOSED, allowing platforms to manage the issue
    appropriately.
  tags:
  - IGM Related Queries
- question: What information does the expected_response_time field provide?
  answer: The expected_response_time field specifies the time duration within which
    the respondent is expected to acknowledge or address the issue after it has been
    raised.
  tags:
  - IGM Related Queries
- question: What does the expected_resolution_time field represent?
  answer: The expected_resolution_time field sets the upper limit on how long it should
    take for the complaint to be resolved from the time it was created.
  tags:
  - IGM Related Queries
- question: What is the role of the refs array within the issue object?
  answer: The refs array links the issue to various external entities like orders,
    items, providers, or fulfillments, creating meaningful contextual relationships.
  tags:
  - IGM Related Queries
- question: What is the purpose of the ref_type field inside the refs array?
  answer: The ref_type field specifies what kind of entity is being referenced — such
    as ORDER, ITEM, or PROVIDER — helping systems understand the nature of the reference.
  tags:
  - IGM Related Queries
- question: Why is a tags field included within the refs array for items?
  answer: The tags field provides structured data for additional attributes like item’s
    quantity, type, or other relevant metadata necessary for processing the issue.
  tags:
  - IGM Related Queries
- question: What does the actors array signify in the issue payload?
  answer: The actors array enumerates all stakeholders involved in the issue, including
    the complainant, respondent, GROs, and other network participants.
  tags:
  - IGM Related Queries
- question: What kind of information is stored under the info field of each actor?
  answer: The info field contains identity and contact details, such as organization
    name, phone number, email, and representative name, useful for verification and
    communication.
  tags:
  - IGM Related Queries
- question: Why is the source_id field included in the issue object?
  answer: The source_id field identifies which actor originally initiated or created
    the issue, serving as the origin point of the complaint.
  tags:
  - IGM Related Queries
- question: What is the meaning of the complainant_id field?
  answer: The complainant_id field represents the actor who has officially submitted
    the complaint.
  tags:
  - IGM Related Queries
- question: What is the role of the respondent_ids field?
  answer: The respondent_ids field lists all the actors who are responding to the
    complaint and possibly provide resolutions or clarifications.
  tags:
  - IGM Related Queries
- question: What does the resolver_ids field indicate in the issue?
  answer: The resolver_ids field contains the identifiers of actors who are resolving
    the complaint.
  tags:
  - IGM Related Queries
- question: Why is the description object significant in an issue?
  answer: The description object provides the details about the complaint being raised
    both a short and long description of the complaint and may include additional
    materials like images or URLs to support the claim.
  tags:
  - IGM Related Queries
- question: What purpose does the images array serve inside the description?
  answer: The images array allows the inclusion of visual evidence or context, such
    as photos of damaged goods, incorrect orders, or service failures.
  tags:
  - IGM Related Queries
- question: Why is the id field critical in each action object?
  answer: The id field uniquely identifies each action taken on the issue, allowing
    precise tracking and referencing throughout the lifecycle.
  tags:
  - IGM Related Queries
- question: What is the significance of the ref_id field in action objects?
  answer: The ref_id field is used to link a particular action as a response or follow-up
    to a previous action, maintaining the conversational or transactional flow.
  tags:
  - IGM Related Queries
- question: Why might some actions include a ref_id while others do not?
  answer: Actions with ref_id refer back to a related resolution or previous action,
    whereas independent actions (like issue creation) do not need such references.
  tags:
  - IGM Related Queries
- question: How is the descriptior.name field used within an action or resolution?
  answer: The descriptior.name field often acts as a label or title that categorizes
    the action, especially helpful for documentation in INFO_REQUESTED or INFO_PROVIDED
    cases.
  tags:
  - IGM Related Queries
- question: What information does the action_by field convey in each action?
  answer: The action_by field identifies the actor (from the actors array through
    id) who has executed the particular action, ensuring clear attribution.
  tags:
  - IGM Related Queries
- question: Why is actor_details provided separately in every action object?
  answer: Actor_details ensures the system captures the actor’s metadata at the time
    of the action, even if that information changes later for example the literal
    agent of an entity acting on the complaint
  tags:
  - IGM Related Queries
- question: What types of data are stored in the media field of an action?
  answer: The media field can include URLs to documents, images, or other multimedia
    attachments that serve as part of the complaint or response.
  tags:
  - IGM Related Queries
- question: Why can multiple INFO_REQUESTED actions exist in a single issue?
  answer: Each instance of INFO_REQUESTED represents a different request for information,
    often from different actors or concerning distinct aspects of the issue.
  tags:
  - IGM Related Queries
- question: What is the use of updated_at timestamps within action and resolution
    objects?
  answer: The updated_at field provides the exact time of the action taken or the
    most recent modification to ensure an accurate audit trail.
  tags:
  - IGM Related Queries
- question: How is the relationship between parent and child resolutions represented
    in the payload?
  answer: A child resolution includes a ref_id pointing to a parent resolution, creating
    a hierarchy for more complex or alternative outcomes. This is used to provide
    multiple resolution options grouped together for the complainant to consume it
    accordingly
  tags:
  - IGM Related Queries
- question: What is the function of the descriptor.code field in resolution objects?
  answer: The descriptor.code categorizes the type of resolution being proposed, such
    as REFUND, RETURN, or REPLACEMENT.
  tags:
  - IGM Related Queries
- question: What does the proposed_by field indicate in a resolution?
  answer: The proposed_by field shows which actor (by ID) has proposed the resolution,
    indicating the initiator of the proposed remedy.
  tags:
  - IGM Related Queries
- question: Why might a resolution contain a ref_id field?
  answer: The ref_id links the resolution to an earlier resolution or action that
    it builds upon, responds to, or modifies.
  tags:
  - IGM Related Queries
- question: Why is a tags array sometimes present in resolution objects?
  answer: The tags array allows the inclusion of detailed metadata, such as specific
    refund amounts, item details, or fulfillment instructions.
  tags:
  - IGM Related Queries
- question: What role does descriptor.short_desc play in a resolution?
  answer: The descriptor.short_desc provides a concise explanation of the resolution
    for quick understanding by users and platforms alike.
  tags:
  - IGM Related Queries
- question: What is the relationship between actions and resolutions in the payload
    structure?
  answer: Actions may reference resolutions to indicate whether they were accepted,
    rejected, or acknowledged by actors.
  tags:
  - IGM Related Queries
- question: Can different actors propose different resolutions for the same issue?
  answer: Yes, multiple eligible actors (like seller or lsp) can submit various resolution
    options for the same complaint in case of a cascaded complaint
  tags:
  - IGM Related Queries
- question: What does the descriptor.code represent in the context of an action?
  answer: The descriptor.code defines the nature of the action, such as OPEN, PROCESSING,
    CLOSED, etc., which is essential for workflow progression.
  tags:
  - IGM Related Queries
- question: Why do multiple actions sometimes share the same description.code?
  answer: This happens when similar actions occur repeatedly, for example, multiple
    INFO_REQUESTED steps at different stages or from different actors.
  tags:
  - Priority Features Related Queries
- question: "How should order_id and message_id be handled?\n A:"
  answer: 'order_id: Unique per domain-level cart. message_id: Unique per API call,
    even within the same domain. These ensure each payload can be tracked and independently
    processed while being linked via ref_order_ids.'
  tags:
  - Priority Features Related Queries
- question: What are some key test cases to validate multicart flows?
  answer: Successful confirmation of all domain orders. Failure in one /confirm call
    and subsequent cancellation of all. Item-level return in one cart and impact on
    logistics in another. Cancellation charges applied selectively per cart. Logistic
    optimization reflected in individual /on_select quotes.
  tags:
  - Priority Features Related Queries
- question: "How should retry logic be handled in multicart confirm failures?\n A:\
    \ Follow the same retry rules as single-order flows, but ensure that retries are\
    \ tracked per cart and that global cancellation is triggered if retry limits are\
    \ breached."
  answer: 1. Generic API Errors 2. Registry/Lookup Service Errors 3. Settlement/Finance
    Errors 4. Order/Logistics Flow Errors 5. Cryptographic/Signature Errors 6. Callback
    / Async Acknowledgements
  tags:
  - Network Observability Queries
- question: What is Network Observability (N.O.)?
  answer: Network Observability is a framework designed to monitor the business and
    technical health of the ONDC network, providing actionable insights to improve
    its performance.  Its primary goal is to enhance interoperability, transparency,
    and trust among network participants by enabling them to self-correct and scale
    within ONDC's unbundled environment.
  tags:
  - Network Observability Queries
- question: In which environment should NP implement NO?
  answer: NO is implemented in the Preprod and Production environment.
  tags:
  - Network Observability Queries
- question: From where can I get N.O. token?
  answer: Please visit the NP portal and login to the portal. There is a button to
    generate NO token. Please use that to generate new token
  tags:
  - Network Observability Queries
- question: Which are the documents related to Network Observability?
  answer: For Prod:- For Preprod:-
  tags:
  - Network Observability Queries
- question: If the buyer NP has pushed to N.O. Do I also need to push as seller NP
  answer: Yes every NP has to push logs using their NO token irrespective of if counterparty
    has already submitted.
  tags:
  - Network Observability Queries
